/**                                                                                                                                                                                                                                                            
* This file was auto-generated by SAP Web IDE build and includes all                                                                                                                                                                                           
* the source files required by SAPUI5 runtime for performance optimization.                                                                                                                                                                                    
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.                                                                                                                                                                   
*/                                                                                                                                                                                                                                                             
jQuery.sap.registerPreloadedModules({                                                                                                                                                                                                                          
	"version": "2.0",                                                                                                                                                                                                                                             
	"name": "com/mscg/applications/cubiscan/measure/Component-preload",                                                                                                                                                                                           
	"modules": {                                                                                                                                                                                                                                                  
		"com/mscg/applications/cubiscan/measure/controller/Detail.controller.js": "/*global location */\nsap.ui.define([\n\t\"com/mscg/applications/cubiscan/measure/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"com/mscg/applications/cub+
iscan/measure/model/formatter\",\n\t'sap/m/Dialog'\n], function(BaseController, JSONModel, formatter, Dialog) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"com.mscg.applications.cubiscan.measure.controller.Detail\", {\n\n\t\tformatter: formatt+
er,\n\t\t_oCubiscanDialog: null,\n\t\t_oManualEntryDialog: null,\n\t\t_oWebSocket: null,\n\t\t_bValidatingProductNumber: false,\n\t\t_oMessagesDialog: null,\n\n\t\t/* =========================================================== */\n\t\t/* lifecycle method+
s                                           */\n\t\t/* =========================================================== */\n\n\t\tonInit: function() {\n\t\t\t// Subscribe to the Fiori Configuration loaded channel so that once it is complete we can start the w+
eb socket connection.\n\t\t\t// Also subscribe to the warehouse number change channel so we can trigger the warehouse dependent functions such as Cubiscan, etc.\n\t\t\tvar oEventBus = sap.ui.getCore().getEventBus();\n\t\t\toEventBus.subscribe(\"com.mscg.+
applications.cubiscan.measure.WarehouseNumber\", \"Changed\", this.onWarehouseNumberChange, this);\n\t\t\toEventBus.subscribe(\"com.mscg.applications.cubiscan.measure.FioriConfiguration\", \"Loaded\", this.onFioriConfigurationLoaded, this);\n\n\t\t\t// M+
odel used to manipulate control states. The chosen values make sure,\n\t\t\t// detail page is busy indication immediately so there is no break in\n\t\t\t// between the busy indication for loading the view's meta data\n\t\t\tvar oViewModel = new JSONModel+
({\n\t\t\t\tbusy: false,\n\t\t\t\tdelay: 0,\n\t\t\t\tlineItemListTitle: this.getResourceBundle().getText(\"detailLineItemTableHeading\"),\n\t\t\t\tisEditCubiscanDialog: false,\n\t\t\t\tselectedWarehouseNumber: null,\n\t\t\t\tselectedCubiscanDevice: \"\"\+
n\t\t\t});\n\n\t\t\tthis.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\n\t\t\tthis.setModel(oViewModel, \"detailView\");\n\t\t\tthis.getOwnerComponent().getModel().metadataLoaded().then(this._onMetadataLoaded.bind(th+
is));\n\t\t},\n\n\t\tonExit: function() {\n\t\t\tvar oEventBus = sap.ui.getCore().getEventBus();\n\t\t\toEventBus.unsubscribe(\"com.mscg.applications.cubiscan.measure.WarehouseNumber\", \"Changed\", this.onWarehouseNumberChange, this);\n\t\t\toEventBus.u+
nsubscribe(\"com.mscg.applications.cubiscan.measure.FioriConfiguration\", \"Loaded\", this.onFioriConfigurationLoaded, this);\n\t\t\t\n\t\t\t// Destroy dialogs.\n\t\t\tif (this._oMessagesDialog) {\n\t\t\t\tthis._oMessagesDialog.destroy();\n\t\t\t}\n\t\t\+
tif (this._oCubiscanDialog) {\n\t\t\t\tthis._oCubiscanDialog.destroy();\n\t\t\t}\n\t\t\tif (this._oManualEntryDialog) {\n\t\t\t\tthis._oManualEntryDialog.destroy();\n\t\t\t}\n\t\t},\n\n\t\t/* =========================================================== */+
\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Triggered when the FioriConfiguration model is loaded within the Component.js file.\n\t\t * +
@function\n\t\t * @param {string} sChannel - the channel for the pub/sub\n\t\t * @param {string} sEvent - the specific event for the channel\n\t\t * @param {object} oData - the OData object being passed\n\t\t */\n\t\tonFioriConfigurationLoaded: function(+
sChannel, sEvent, oData) {\n\t\t\tvar oFioriConfigurationModel = this.getOwnerComponent().getModel(\"fioriConfiguration\");\n\t\t\tthis.byId(\"manualEntryButton\").setVisible(oFioriConfigurationModel.getProperty(\"/settings/allowManualCreation\"));\n\t\t+
},\n\n\t\t/**\n\t\t * Event handler for change of the warehouse number within the master view.\n\t\t * @function\n\t\t * @param {string} sChannel - the channel for the pub/sub\n\t\t * @param {string} sEvent - the specific event for the channel\n\t\t * @p+
aram {object} oData - the OData object being passed\n\t\t */\n\t\tonWarehouseNumberChange: function(sChannel, sEvent, oData) {\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\t\t\toViewModel.setProperty(\"/selectedWarehouseNumber\", oData.wareho+
useNumber);\n\t\t\toViewModel.setProperty(\"/selectedCubiscanDevice\", \"\");\n\n\t\t\t// Rebind the cubiscan device select.\n\t\t\tvar oCubiscanDeviceInput = this.byId(\"cubiscanDeviceInput\");\n\t\t\toCubiscanDeviceInput.setModel(this.getOwnerComponent+
().getModel(\"cubiscanDevices\"));\n\t\t\tvar filters = new Array();\n\t\t\tfilters.push(new sap.ui.model.Filter(\"warehouseNumber\", sap.ui.model.FilterOperator.EQ, oViewModel.getProperty(\n\t\t\t\t\"/selectedWarehouseNumber\")));\n\n\t\t\toCubiscanDevi+
ceInput.bindItems({\n\t\t\t\tpath: \"/results\",\n\t\t\t\ttemplate: new sap.ui.core.Item({\n\t\t\t\t\tkey: \"{deviceName}\",\n\t\t\t\t\ttext: \"{deviceDescription}\"\n\t\t\t\t}),\n\t\t\t\tfilters: filters\n\t\t\t});\n\t\t\toCubiscanDeviceInput.setSelecte+
dKey();\n\t\t},\n\n\t\t/**\n\t\t * Triggered if the user triggers the value help request on the product number input within the\n\t\t * Add Manual Entry dialog.\n\t\t * @function\n\t\t * @param {object} oEvent\n\t\t */\n\t\tonProductValueHelpRequest: fun+
ction(oEvent) {\n\t\t\tvar handleClose = function(oEventObj) {\n\t\t\t\tvar oSelectedItem = oEventObj.getParameter(\"selectedItem\");\n\t\t\t\tif (oSelectedItem) {\n\t\t\t\t\tthis.byId(\"manualEntryProductNumberInput\").setValue(oSelectedItem.getTitle())+
;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar handleProductValueHelpSearch = function(oEventObj) {\n\t\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\t\t\t\tvar sValue = oEventObj.getParameter(\"value\");\n\t\t\t\tvar aFilters = [];\n\n\t\t\t\taFilters.pus+
h(new sap.ui.model.Filter(\"warehouseNumber\", sap.ui.model.FilterOperator.EQ, oViewModel.getProperty(\n\t\t\t\t\t\"/selectedWarehouseNumber\")));\n\t\t\t\taFilters.push(new sap.ui.model.Filter(\"product\", sap.ui.model.FilterOperator.Contains, sValue));+
\n\t\t\t\toEventObj.getSource().getBinding(\"items\").filter(aFilters);\n\t\t\t};\n\n\t\t\t// Define the filters for use in the binding of the products.\n\t\t\tvar aFilters = [];\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\t\t\taFilters.push+
(new sap.ui.model.Filter(\"warehouseNumber\", sap.ui.model.FilterOperator.EQ, oViewModel.getProperty(\n\t\t\t\t\"/selectedWarehouseNumber\")));\n\n\t\t\tvar selDialog = new sap.m.SelectDialog({\n\t\t\t\ttitle: \"Products\",\n\t\t\t\titems: {\n\t\t\t\t\tp+
ath: \"/ProductLookupSet\",\n\t\t\t\t\ttemplate: new sap.m.StandardListItem({\n\t\t\t\t\t\ttitle: \"{product}\",\n\t\t\t\t\t\tdescription: \"{productDescription}\",\n\t\t\t\t\t\tactive: true\n\t\t\t\t\t}),\n\t\t\t\t\tfilters: aFilters\n\t\t\t\t},\n\t\t\t+
\tsearch: [handleProductValueHelpSearch, this],\n\t\t\t\tconfirm: [handleClose, this],\n\t\t\t\tcancel: [handleClose, this]\n\t\t\t});\n\t\t\tselDialog.setModel(this.getOwnerComponent().getModel());\n\n\t\t\t// toggle compact style\n\t\t\tjQuery.sap.sync+
StyleClass(\"sapUiSizeCompact\", this.getView(), selDialog);\n\t\t\tselDialog.open();\n\t\t},\n\n\t\t/**\n\t\t * Triggered when the users enters data into the product field on the Add Manual Entry Dialog.\n\t\t * Creates an inline value help, filters the+
 results.\n\t\t * @function\n\t\t * @param {object} oEvent\n\t\t */\n\t\thandleProductSuggestion: function(oEvent) {\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\t\t\tvar sTerm = oEvent.getParameter(\"suggestValue\");\n\t\t\tvar aFilters = []+
;\n\t\t\tif (sTerm) {\n\t\t\t\taFilters.push(new sap.ui.model.Filter(\"warehouseNumber\", sap.ui.model.FilterOperator.EQ, oViewModel.getProperty(\n\t\t\t\t\t\"/selectedWarehouseNumber\")));\n\t\t\t\taFilters.push(new sap.ui.model.Filter(\"product\", sap.+
ui.model.FilterOperator.Contains, sTerm.toUpperCase()));\n\t\t\t}\n\t\t\toEvent.getSource().getBinding(\"suggestionItems\").filter(aFilters);\n\t\t},\n\n\t\t/**\n\t\t * Triggered when the re-binding of data for the UOM select on the Add Manual Entry Dial+
og completes.\n\t\t * @function\n\t\t * @param {object} oEvent\n\t\t */\n\t\thandleUomDataReceived: function(oEvent) {\n\t\t\t// If we are validating a product and the UOM dropdown is empty, means that there are no\n\t\t\t// UOM's that are currently not +
in the worklist.\n\t\t\tif (this._bValidatingProductNumber && oEvent.getSource().getLength() === 0) {\n\t\t\t\tsap.m.MessageBox.error(\n\t\t\t\t\t\"All configured Cubiscan UOM's already exists in the worklist.\", {\n\t\t\t\t\t\tstyleClass: \"sapUiSizeCom+
pact\"\n\t\t\t\t\t});\n\t\t\t\tthis.byId(\"manualEntryProductNumberInput\").setValue(\"\");\n\t\t\t\tthis.byId(\"manualEntryProductNumberInput\").focus();\n\t\t\t} else {\n\t\t\t\tthis.byId(\"manualEntryUomInput\").setEnabled(true);\n\t\t\t\tthis.byId(\"+
manualEntrySaveButton\").setEnabled(true);\n\t\t\t}\n\n\t\t\tthis._bValidatingProductNumber = false;\n\t\t},\n\n\t\t/**\n\t\t * Triggered when the product is changed in the Add Manual Entry Dialog.\n\t\t * @function\n\t\t * @param {object} oEvent\n\t\t *+
/\n\t\thandleProductValidation: function(oEvent) {\n\t\t\tthis._bValidatingProductNumber = true;\n\t\t\tvar aFilters = [];\n\t\t\taFilters.push(new sap.ui.model.Filter(\"product\", sap.ui.model.FilterOperator.EQ, oEvent.getSource().getValue()));\n\n\t\t\+
tvar oUomInput = this.byId(\"manualEntryUomInput\");\n\t\t\toUomInput.getBinding(\"items\").filter(aFilters);\n\t\t},\n\n\t\t/**\n\t\t * Event handler when the share by E-Mail button has been clicked\n\t\t * @public\n\t\t */\n\t\tonShareEmailPress: funct+
ion() {\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\n\t\t\tsap.m.URLHelper.triggerEmail(\n\t\t\t\tnull,\n\t\t\t\toViewModel.getProperty(\"/shareSendEmailSubject\"),\n\t\t\t\toViewModel.getProperty(\"/shareSendEmailMessage\")\n\t\t\t);\n\t\t}+
,\n\n\t\t/**\n\t\t * Event handler when the share in JAM button has been clicked\n\t\t * @public\n\t\t */\n\t\tonShareInJamPress: function() {\n\t\t\tvar oViewModel = this.getModel(\"detailView\"),\n\t\t\t\toShareDialog = sap.ui.getCore().createComponent+
({\n\t\t\t\t\tname: \"sap.collaboration.components.fiori.sharing.dialog\",\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tobject: {\n\t\t\t\t\t\t\tid: location.href,\n\t\t\t\t\t\t\tshare: oViewModel.getProperty(\"/shareOnJamTitle\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\+
t\t\t});\n\n\t\t\toShareDialog.open();\n\t\t},\n\n\t\t/**\n\t\t * Updates the item count within the line item table's header\n\t\t * @param {object} oEvent an event containing the total number of items in the list\n\t\t * @private\n\t\t */\n\t\tonListUpd+
ateFinished: function(oEvent) {\n\t\t\tvar sTitle,\n\t\t\t\tiTotalItems = oEvent.getParameter(\"total\"),\n\t\t\t\toViewModel = this.getModel(\"detailView\");\n\n\t\t\t// only update the counter if the length is final\n\t\t\tif (this.byId(\"lineItemsList+
\").getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tif (iTotalItems) {\n\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"detailLineItemTableHeadingCount\", [iTotalItems]);\n\t\t\t\t} else {\n\t\t\t\t\t//Display 'Line Items' instead of 'Line items +
(0)'\n\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"detailLineItemTableHeading\");\n\t\t\t\t}\n\t\t\t\toViewModel.setProperty(\"/lineItemListTitle\", sTitle);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Displays the manual entry dialog for Manual Entry c+
reation.\n\t\t * @function\n\t\t * @param {object} oEvent\n\t\t */\n\t\tonManualEntryDialogDisplay: function(oEvent) {\n\t\t\tvar oDialog = this._getManualEntryDialog();\n\n\t\t\t// Need to reset the state of the inputs.\n\t\t\t// Clear the product numbe+
r.\n\t\t\t// Disable the UOM and clear all items.\n\t\t\t// Disable the save button.\n\t\t\tthis.byId(\"manualEntryProductNumberInput\").setValue(\"\");\n\t\t\tthis.byId(\"manualEntryUomInput\").setEnabled(false);\n\t\t\tthis.byId(\"manualEntryUomInput\"+
).destroyItems();\n\t\t\tthis.byId(\"manualEntrySaveButton\").setEnabled(false);\n\n\t\t\t// Add an event handler for the dataReceived event if it does not already exist.\n\t\t\tvar oBinding = this.byId(\"manualEntryUomInput\").getBinding(\"items\");\n\t+
\t\tif (!oBinding.hasListeners(\"dataReceived\")) {\n\t\t\t\toBinding.attachEvent(\"dataReceived\", this.handleUomDataReceived, this);\n\t\t\t}\n\t\t\toDialog.open();\n\t\t},\n\n\t\tonMessagesDialogClose: function(oEvent) {\n\t\t\tthis._getMessagesDialog+
().close();\n\t\t},\n\n\t\t/**\n\t\t * Triggered when the Close button is clicked on the Manual Entry Dialog.\n\t\t * @function\n\t\t * @param {object} oEvent\n\t\t */\n\t\tonManualEntryDialogClose: function(oEvent) {\n\t\t\tthis._closeManualEntryDialog(+
);\n\t\t},\n\n\t\tonManualEntryDialogSave: function(oEvent) {\n\t\t\tvar oModel = this.getModel();\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\n\t\t\tvar oObject = {\n\t\t\t\t\"warehouseNumber\": oViewModel.getProperty(\"/selectedWarehouseNu+
mber\"),\n\t\t\t\t\"product\": this.byId(\"manualEntryProductNumberInput\").getValue(),\n\t\t\t\t\"unitOfMeasure\": this.byId(\"manualEntryUomInput\").getSelectedKey(),\n\t\t\t\t\"status\": 'N'\n\t\t\t};\n\n\t\t\t// Trigger the OData create method.\n\t\t+
\toModel.create(\"/WorklistItemSet\", oObject, {\n\t\t\t\tsuccess: function(oData, oResponse) {\n\t\t\t\t\tvar oMessages = JSON.parse(oResponse.headers[\"zmscg-messages\"]);\n\t\t\t\t\tvar oJsonModel = new JSONModel(oMessages);\n\n\t\t\t\t\t// Display th+
e dialog and bind to the odata model.\n\t\t\t\t\tvar oDialog = this._getMessagesDialog();\n\t\t\t\t\toDialog.setModel(oJsonModel);\n\t\t\t\t\toDialog.open();\n\n\t\t\t\t\t// Close the dialog.\n\t\t\t\t\tthis._closeManualEntryDialog();\n\t\t\t\t}.bind(thi+
s),\n\t\t\t\terror: function(oError) {\n\t\t\t\t\tsap.m.MessageBox.error(\n\t\t\t\t\t\t\"An error occurred while creating the Worklist record.\", {\n\t\t\t\t\t\t\tstyleClass: \"sapUiSizeCompact\"\n\t\t\t\t\t\t});\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t},\+
n\n\t\t/**\n\t\t * Looks up the selected object and then displays the screen in the appropriate mode.\n\t\t * @function\n\t\t * @param {object} oEvent\n\t\t */\n\t\tonCubiscanDialogDisplay: function(oEvent) {\n\t\t\tvar oViewModel = this.getModel(\"detai+
lView\");\n\n\t\t\t// Check if a Cubiscan device is selected first.\n\t\t\tif (!oViewModel.getProperty(\"/selectedCubiscanDevice\")) {\n\t\t\t\tsap.m.MessageBox.error(\n\t\t\t\t\t\"No Cubiscan device selected.\", {\n\t\t\t\t\t\tstyleClass: \"sapUiSizeCom+
pact\"\n\t\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar sPath = oEvent.getSource().getBindingContext().getPath();\n\t\t\tvar oDialog = this._getCubiscanDialog();\n\n\t\t\t// Disable the update button.\n\t\t\tthis.byId(\"editUpdateButton\").setEnable+
d(false);\n\t\t\t\n\t\t\t// Clear the value state on all inputs.\n\t\t\tthis.byId(\"cubiscanLength\").setValueState(sap.ui.core.ValueState.None);\n\t\t\tthis.byId(\"cubiscanWidth\").setValueState(sap.ui.core.ValueState.None);\n\t\t\tthis.byId(\"cubiscanH+
eight\").setValueState(sap.ui.core.ValueState.None);\n\t\t\tthis.byId(\"cubiscanGrossWeight\").setValueState(sap.ui.core.ValueState.None);\n\t\t\tthis.byId(\"cubiscanVolume\").setValueState(sap.ui.core.ValueState.None);\n\n\t\t\t// Open the WebSocket con+
nection for the Cubiscan.\n\t\t\tvar oFioriConfigModel = this.getOwnerComponent().getModel(\"fioriConfiguration\");\n\t\t\tvar oWebSocket = new WebSocket(\"wss://\" + oFioriConfigModel.getProperty(\"/webSocket/hostName\") + \":\" + oFioriConfigModel.getP+
roperty(\n\t\t\t\t\"/webSocket/portNumber\") + oFioriConfigModel.getProperty(\"/webSocket/url\"));\n\t\t\toWebSocket.onopen = this._onWebSocketOpen.bind(this);\n\t\t\toWebSocket.onmessage = this._onWebSocketMessage.bind(this);\n\t\t\toWebSocket.onclose =+
 this._onWebSocketClose.bind(this);\n\t\t\toWebSocket.onerror = this._onWebSocketError.bind(this);\n\t\t\tthis._oWebSocket = oWebSocket;\n\n\t\t\t// Bind the dialog and open.\n\t\t\toViewModel.setProperty(\"/isEditCubiscanDialog\", oEvent.getSource().dat+
a(\"editCubiscanDialog\"));\n\t\t\tthis._bindDialog(sPath, oDialog);\n\t\t\toDialog.open();\n\t\t},\n\n\t\t/**\n\t\t * Triggered when the Close button is clicked on the Cubiscan Details Dialog.\n\t\t * @function\n\t\t * @param {object} oEvent\n\t\t */\n\+
t\tonCubiscanDialogClose: function(oEvent) {\n\t\t\tthis._closeCubiscanDialog();\n\t\t},\n\n\t\t/**\n\t\t * Triggered when the Measure button is clicked on the Cubiscan Details Dialog.\n\t\t * Displays the measure \"Please Wait\" dialog.\n\t\t * @functio+
n\n\t\t * @param {object} oEvent\n\t\t */\n\t\tonCubiscanDialogMeasure: function(oEvent) {\n\t\t\tthis._getCubiscanDialog().setVisible(false);\n\n\t\t\tvar oBusyDialog = this.getView().byId(\"measureBusyDialog\");\n\t\t\toBusyDialog.setVisible(true).open+
();\n\n\t\t\t// Trigger a call over the websocket.  This will start polling by the\n\t\t\t// appropriate client implementation.\n\t\t\t// Is the websocket connection open?\n\t\t\tif (this._oWebSocket.readyState === 1) {\n\t\t\t\t// Yup, let's do this...\+
n\t\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\t\t\t\tvar oObject = oEvent.getSource().getBindingContext().getObject();\n\t\t\t\tvar oRequestObject = {\n\t\t\t\t\twarehouseNumber: oObject.warehouseNumber,\n\t\t\t\t\tdeviceName: oViewModel.get+
Property(\"/selectedCubiscanDevice\"),\n\t\t\t\t\tproduct: oObject.product,\n\t\t\t\t\tuom: oObject.unitOfMeasure\n\t\t\t\t};\n\n\t\t\t\tthis._oWebSocket.send(JSON.stringify(oRequestObject));\n\t\t\t} else {\n\t\t\t\t// Should show a message indicating t+
hat the websocket is closed.\n\t\t\t\tsap.m.MessageBox.error(\n\t\t\t\t\t\"An error occurred, the connection to the Cubiscan device appears to be closed.\", {\n\t\t\t\t\t\tstyleClass: \"sapUiSizeCompact\"\n\t\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t +
* Triggered when the Update button is clicked on the Cubiscan Details Dialog.\n\t\t * @param {object} oEvent\n\t\t */\n\t\tonCubiscanDialogUpdate: function(oEvent) {\n\t\t\tvar oModel = this.getModel();\n\t\t\tvar oBindingContext = oEvent.getSource().get+
BindingContext();\n\t\t\tvar sPath = oBindingContext.getPath();\n\t\t\tvar oObject = oBindingContext.getObject();\n\n\t\t\t// Update the object.\n\t\t\toObject.status = \"S\";\n\n\t\t\t// Delete the productData so that we can update.  Hack but it works I+
 guess...\n\t\t\tdelete oObject.productData;\n\n\t\t\t// Trigger the OData update method.\n\t\t\toModel.update(sPath, oObject, {\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tsap.m.MessageToast.show(\"Worklist item updated successfully.\");\n\n\t\t\t\t\t// C+
lose the dialog.\n\t\t\t\t\tthis._closeCubiscanDialog();\n\t\t\t\t}.bind(this),\n\t\t\t\terror: function() {\n\t\t\t\t\tsap.m.MessageBox.error(\n\t\t\t\t\t\t\"An error occurred while updating the Worklist record.\", {\n\t\t\t\t\t\t\tstyleClass: \"sapUiSi+
zeCompact\"\n\t\t\t\t\t\t});\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Triggered when the Discrepancy button is clicked on the Cubiscan Details Dialog.\n\t\t * @function\n\t\t * @param {object} oEvent\n\t\t */\n\t\tonCubiscanDialogDiscr+
epancy: function(oEvent) {\n\t\t\tvar oModel = this.getModel();\n\t\t\tvar oBindingContext = oEvent.getSource().getBindingContext();\n\t\t\tvar sPath = oBindingContext.getPath();\n\t\t\tvar oObject = oBindingContext.getObject();\n\n\t\t\t// Update the ob+
ject.\n\t\t\toObject.worklistCategory = \"INT\";\n\t\t\toObject.status = \"R\";\n\n\t\t\t// Delete the productData so that we can update.  Hack but it works I guess...\n\t\t\tdelete oObject.productData;\n\n\t\t\t// Trigger the OData update method.\n\t\t\+
toModel.update(sPath, oObject, {\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tsap.m.MessageToast.show(\"Worklist item updated successfully.\");\n\n\t\t\t\t\t// Close the dialog.\n\t\t\t\t\tthis._closeCubiscanDialog();\n\t\t\t\t}.bind(this),\n\t\t\t\terror: +
function() {\n\t\t\t\t\tsap.m.MessageBox.error(\n\t\t\t\t\t\t\"An error occurred while updating the Worklist record.\", {\n\t\t\t\t\t\t\tstyleClass: \"sapUiSizeCompact\"\n\t\t\t\t\t\t});\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Trigger+
ed when the Cancel button is clicked on the Cubiscan Busy Dialog.\n\t\t * @function\n\t\t * @param {object} oEvent\n\t\t */\n\t\tonMeasureBusyDialogClose: function(oEvent) {\n\t\t\t// Redisply the dialog.\n\t\t\tthis._getCubiscanDialog().setVisible(true)+
;\n\t\t\tvar userClosed = oEvent.getParameter(\"cancelPressed\");\n\t\t},\n\n\t\t/**\n\t\t * Factory method for worklist item rendering.  Called for each line in the worklist items rendering.\n\t\t * \n\t\t * @function\n\t\t * @param {String} sId id of t+
he parent control\n\t\t * @param {sap.ui.model.ContextBinding} oContext context binding object, data essentially\n\t\t * @return {sap.m.ColumnListItem} a ColumnListItem object\n\t\t */\n\t\tworklistItemsFactory: function(sId, oContext) {\n\t\t\t// Get th+
e status, if the status is \"N\" then we need to make sure the Dimension button is enabled.\n\t\t\tvar sStatus = oContext.getProperty(\"status\");\n\t\t\tvar sStatusText = oContext.getProperty(\"statusText\");\n\n\t\t\tvar oButtonsContainer = new sap.m.H+
Box();\n\t\t\toButtonsContainer.addItem(new sap.m.Button({\n\t\t\t\ticon: \"sap-icon://dimension\",\n\t\t\t\ttooltip: \"Dimension Product\",\n\t\t\t\tpress: [this.onCubiscanDialogDisplay, this],\n\t\t\t\tenabled: (sStatus === \"N\") ? true : false,\n\t\t+
\t\tcustomData: {\n\t\t\t\t\tType: \"sap.ui.core.CustomData\",\n\t\t\t\t\tkey: \"editCubiscanDialog\",\n\t\t\t\t\tvalue: true\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\toButtonsContainer.addItem(new sap.m.Button({\n\t\t\t\ticon: \"sap-icon://detail-view\",\n\t\t\t\+
ttooltip: \"Show Details\",\n\t\t\t\tpress: [this.onCubiscanDialogDisplay, this],\n\t\t\t\tcustomData: {\n\t\t\t\t\tType: \"sap.ui.core.CustomData\",\n\t\t\t\t\tkey: \"editCubiscanDialog\",\n\t\t\t\t\tvalue: false\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tvar row +
= new sap.m.ColumnListItem(sId, {\n\t\t\t\ttype: \"Active\",\n\t\t\t\tcells: [\n\t\t\t\t\tnew sap.m.ObjectIdentifier({\n\t\t\t\t\t\ttitle: \"{unitOfMeasure}\"\n\t\t\t\t\t}),\n\t\t\t\t\tnew sap.m.Text({\n\t\t\t\t\t\ttext: sStatusText\n\t\t\t\t\t}),\n\t\t\+
t\t\toButtonsContainer\n\t\t\t\t]\n\t\t\t});\n\n\t\t\treturn row;\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* ============================+
=============================== */\n\n\t\t/**\n\t\t * Returns the Messages dialog and if it is not already created, creates it and returns a reference.\n\t\t * @function\n\t\t * @return {sap.m.Dialog} returns an instance of the dialog\n\t\t * @private\n\+
t\t */\n\t\t_getMessagesDialog: function() {\n\t\t\t// create dialog lazily\n\t\t\tif (!this._oMessagesDialog) {\n\t\t\t\t// create dialog via fragment factory\n\t\t\t\tthis._oMessagesDialog = sap.ui.xmlfragment(this.getView().getId(),\n\t\t\t\t\t\"com.m+
scg.applications.cubiscan.measure.view.MessageDialog\", this);\n\t\t\t}\n\n\t\t\treturn this._oMessagesDialog;\n\t\t},\n\n\t\t/**\n\t\t * Returns the Cubiscan dialog and if it is not already created, creates it and returns a reference.\n\t\t * @function\+
n\t\t * @return {sap.m.Dialog} returns an instance of the dialog\n\t\t * @private\n\t\t */\n\t\t_getCubiscanDialog: function() {\n\t\t\t// create dialog lazily\n\t\t\tif (!this._oCubiscanDialog) {\n\t\t\t\t// create dialog via fragment factory\n\t\t\t\tt+
his._oCubiscanDialog = sap.ui.xmlfragment(this.getView().getId(),\n\t\t\t\t\t\"com.mscg.applications.cubiscan.measure.view.MeasurementDetailsDialog\", this);\n\t\t\t\tthis.getView().addDependent(this._oCubiscanDialog);\n\t\t\t}\n\n\t\t\treturn this._oCub+
iscanDialog;\n\t\t},\n\n\t\t/**\n\t\t * Closes the Cubiscan details dialog.\n\t\t * @function\n\t\t * @private\n\t\t */\n\t\t_closeCubiscanDialog: function() {\n\t\t\tthis._oWebSocket.close();\n\t\t\tthis._oWebSocket = null;\n\n\t\t\tthis._getCubiscanDia+
log().close();\n\t\t},\n\n\t\t/**\n\t\t * Binds the product data to the dialog object.  Once the data is bound, it opens the dialog window.\n\t\t * @function\n\t\t * @param {string} sPath binding path\n\t\t * @param {sap.m.Dialog} oDialog dialog to bind +
the data too\n\t\t * @private\n\t\t */\n\t\t_bindDialog: function(sPath, oDialog) {\n\t\t\t// Set busy indicator during view binding\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\n\t\t\t// If the view was not bound yet its not busy, only if th+
e binding requests data it is set to busy again\n\t\t\toViewModel.setProperty(\"/busy\", false);\n\n\t\t\toDialog.bindElement({\n\t\t\t\tpath: sPath,\n\t\t\t\tparameters: {\n\t\t\t\t\t\"expand\": \"productData\"\n\t\t\t\t},\n\t\t\t\tevents: {\n\t\t\t\t\t+
dataRequested: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Ret+
urns the Manual Entry dialog and if it is not already created, creates it and returns a reference.\n\t\t * @function\n\t\t * @return {sap.m.Dialog} returns an instance of the dialog\n\t\t * @private\n\t\t */\n\t\t_getManualEntryDialog: function() {\n\t\t+
\t// create dialog lazily\n\t\t\tif (!this._oManualEntryDialog) {\n\t\t\t\t// create dialog via fragment factory\n\t\t\t\tthis._oManualEntryDialog = sap.ui.xmlfragment(this.getView().getId(),\n\t\t\t\t\t\"com.mscg.applications.cubiscan.measure.view.Manua+
lEntryDialog\", this);\n\t\t\t\tthis.getView().addDependent(this._oManualEntryDialog);\n\t\t\t}\n\n\t\t\treturn this._oManualEntryDialog;\n\t\t},\n\n\t\t/**\n\t\t * Closes the Manual Entry dialog.\n\t\t * @function\n\t\t * @private\n\t\t */\n\t\t_closeMa+
nualEntryDialog: function() {\n\t\t\tthis._getManualEntryDialog().close();\n\t\t},\n\n\t\t/**\n\t\t * Binds the view to the object path and expands the aggregated line items.\n\t\t * @function\n\t\t * @param {sap.ui.base.Event} oEvent pattern match event+
 in route 'object'\n\t\t * @private\n\t\t */\n\t\t_onObjectMatched: function(oEvent) {\n\t\t\tvar oArguments = oEvent.getParameter(\"arguments\");\n\t\t\tvar warehouse = oArguments.warehouse;\n\t\t\tvar product = oArguments.product;\n\n\t\t\tthis.getMode+
l().metadataLoaded().then(function() {\n\t\t\t\tvar sObjectPath = this.getModel().createKey(\"WorklistHeaderSet\", {\n\t\t\t\t\twarehouseNumber: warehouse,\n\t\t\t\t\tproduct: product\n\t\t\t\t});\n\t\t\t\tthis._bindView(\"/\" + sObjectPath);\n\t\t\t}.bi+
nd(this));\n\t\t},\n\n\t\t/**\n\t\t * Binds the view to the object path. Makes sure that detail view displays\n\t\t * a busy indicator while data for the corresponding element binding is loaded.\n\t\t * @function\n\t\t * @param {string} sObjectPath path +
to the object to be bound to the view.\n\t\t * @private\n\t\t */\n\t\t_bindView: function(sObjectPath) {\n\t\t\t// Set busy indicator during view binding\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\n\t\t\t// If the view was not bound yet its+
 not busy, only if the binding requests data it is set to busy again\n\t\t\toViewModel.setProperty(\"/busy\", false);\n\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: sObjectPath,\n\t\t\t\tevents: {\n\t\t\t\t\tchange: this._onBindingChange.bind(this)+
,\n\t\t\t\t\tdataRequested: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function() {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_o+
nBindingChange: function() {\n\t\t\tvar oView = this.getView(),\n\t\t\t\toElementBinding = oView.getElementBinding();\n\n\t\t\t// No data for the binding\n\t\t\tif (!oElementBinding.getBoundContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"de+
tailObjectNotFound\");\n\t\t\t\t// if object could not be found, the selection in the master list\n\t\t\t\t// does not make sense anymore.\n\t\t\t\tthis.getOwnerComponent().oListSelector.clearMasterListSelection();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar +
sPath = oElementBinding.getPath(),\n\t\t\t\toResourceBundle = this.getResourceBundle(),\n\t\t\t\toObject = oView.getModel().getObject(sPath),\n\t\t\t\tsObjectId = oObject.product,\n\t\t\t\tsObjectName = oObject.product,\n\t\t\t\toViewModel = this.getMode+
l(\"detailView\");\n\n\t\t\toViewModel.setProperty(\"/saveAsTileTitle\", oResourceBundle.getText(\"shareSaveTileAppTitle\", [sObjectName]));\n\t\t\toViewModel.setProperty(\"/shareOnJamTitle\", sObjectName);\n\t\t\toViewModel.setProperty(\"/shareSendEmail+
Subject\",\n\t\t\t\toResourceBundle.getText(\"shareSendEmailObjectSubject\", [sObjectId]));\n\t\t\toViewModel.setProperty(\"/shareSendEmailMessage\",\n\t\t\t\toResourceBundle.getText(\"shareSendEmailObjectMessage\", [sObjectName, sObjectId, location.href+
]));\n\t\t},\n\n\t\t_onMetadataLoaded: function() {\n\t\t\t// Store original busy indicator delay for the detail view\n\t\t\tvar iOriginalViewBusyDelay = this.getView().getBusyIndicatorDelay(),\n\t\t\t\toViewModel = this.getModel(\"detailView\"),\n\t\t\t+
\toLineItemTable = this.byId(\"lineItemsList\"),\n\t\t\t\tiOriginalLineItemTableBusyDelay = oLineItemTable.getBusyIndicatorDelay();\n\n\t\t\t// Make sure busy indicator is displayed immediately when\n\t\t\t// detail view is displayed for the first time\n+
\t\t\toViewModel.setProperty(\"/delay\", 0);\n\t\t\toViewModel.setProperty(\"/lineItemTableDelay\", 0);\n\n\t\t\toLineItemTable.attachEventOnce(\"updateFinished\", function() {\n\t\t\t\t// Restore original busy indicator delay for line item table\n\t\t\t+
\toViewModel.setProperty(\"/lineItemTableDelay\", iOriginalLineItemTableBusyDelay);\n\t\t\t});\n\n\t\t\t// Binding the view will set it to not busy - so the view is always busy if it is not bound\n\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t// +
Restore original busy indicator delay for the detail view\n\t\t\toViewModel.setProperty(\"/delay\", iOriginalViewBusyDelay);\n\t\t},\n\n\t\t//**********************************************************************************************\n\t\t// Web socke+
t handler methods.\n\t\t//**********************************************************************************************\n\t\t/**\n\t\t * Handler method for when the web socket receives a message.\n\t\t * @function\n\t\t * @param {object} oEvent, event o+
bject that contains the event information including the message.\n\t\t * @private\n\t\t */\n\t\t_onWebSocketMessage: function(oEvent) {\n\t\t\t// Process received Message\n\t\t\tvar oResponse = JSON.parse(oEvent.data);\n\t\t\tvar oViewModel = this.getMod+
el(\"detailView\");\n\t\t\tvar sWarehouseNumber = oViewModel.getProperty(\"/selectedWarehouseNumber\");\n\t\t\tvar sDeviceName = oViewModel.getProperty(\"/selectedCubiscanDevice\");\n\t\t\tvar oBusyDialog = this.getView().byId(\"measureBusyDialog\");\n\n+
\t\t\t// Validate that the message is destined for this instance.  Same warehouse number and cubiscan device...\n\t\t\tif (oResponse.warehouseNumber === sWarehouseNumber && oResponse.deviceName === sDeviceName) {\n\t\t\t\tswitch (oResponse.action) {\n\t\+
t\t\t\tcase \"success\":\n\t\t\t\t\t\tthis._handleCubiscanWebsocketMessage(oResponse);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"timeout\":\n\t\t\t\t\t\tsap.m.MessageBox.information(\n\t\t\t\t\t\t\t\"Timeout occured while waiting to receive scan data from th+
e Cubiscan device.\", {\n\t\t\t\t\t\t\t\tstyleClass: \"sapUiSizeCompact\"\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Close the busy dialog and show the details dialog.\n\t\t\t\t\t\toBusyDialog.setVisible(false).close();\n\t\t\t\t\t\tthis._getCubiscanDialog().s+
etVisible(true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"connectError\":\n\t\t\t\t\t\tsap.m.MessageBox.error(\n\t\t\t\t\t\t\t\"Error occurred while trying to establish a connection with the Cubiscan device.\", {\n\t\t\t\t\t\t\t\tstyleClass: \"sapUiSizeComp+
act\"\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Close the busy dialog and show the details dialog.\n\t\t\t\t\t\toBusyDialog.setVisible(false).close();\n\t\t\t\t\t\tthis._getCubiscanDialog().setVisible(true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n+
\t\t/**\n\t\t * Handler method for the onopen event on the websocket.  Used to do any setup once the websocket is open.\n\t\t * @function\n\t\t * @param {object} oEvent\n\t\t * @private\n\t\t */\n\t\t_onWebSocketOpen: function(oEvent) {\n\t\t\t// Handle +
anything you want to do upon opening the websocket connection.\n\t\t},\n\n\t\t/**\n\t\t * Handler method for the onclose event on the websocket.  Used to do any cleanup, etc. when the websocket is closed.\n\t\t * @function\n\t\t * @param {object} oEvent\+
n\t\t * @private\n\t\t */\n\t\t_onWebSocketClose: function(oEvent) {\n\t\t\t// Handle anything you want to do upon closing the websocket connection.\n\t\t},\n\n\t\t/**\n\t\t * Handler method for the error event.  Used to process any error handling.\n\t\t+
 * @function\n\t\t * @param {object} oEvent\n\t\t * @private\n\t\t */\n\t\t_onWebSocketError: function(oEvent) {\n\t\t\tsap.m.MessageBox.warning(\n\t\t\t\t\"Websocket connection failed.\", {\n\t\t\t\t\tstyleClass: \"sapUiSizeCompact\"\n\t\t\t\t});\n\t\t}+
,\n\t\t\n\t\t_determineValueState: function(iStatus){\n\t\t\tif(iStatus === 1){\n\t\t\t\treturn sap.ui.core.ValueState.Sucess;\n\t\t\t}else if(iStatus === 2){\n\t\t\t\treturn sap.ui.core.ValueState.Warning;\n\t\t\t}else if(iStatus === 3){\n\t\t\t\treturn+
 sap.ui.core.ValueState.Error;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Handle the cubiscan response message.  Populate the data into the screen and hide the waiting dialog.\n\t\t * @function\n\t\t * @param {object} oMessage JSON object containing the message+
 contents\n\t\t * @private\n\t\t */\n\t\t_handleCubiscanWebsocketMessage: function(oMessage) {\n\t\t\t// Refresh the binding to get the newest data.\n\t\t\tvar oDialog = this._getCubiscanDialog();\n\t\t\toDialog.getElementBinding().refresh();\n\n\t\t\t//+
 Enable the update button.\n\t\t\tthis.byId(\"editUpdateButton\").setEnabled(true);\n\t\t\t\n\t\t\t// Update the value states.\n\t\t\tthis.byId(\"cubiscanLength\").setValueState(this._determineValueState(oMessage.lengthStatus));\n\t\t\tthis.byId(\"cubisc+
anWidth\").setValueState(this._determineValueState(oMessage.widthStatus));\n\t\t\tthis.byId(\"cubiscanHeight\").setValueState(this._determineValueState(oMessage.heightStatus));\n\t\t\tthis.byId(\"cubiscanGrossWeight\").setValueState(this._determineValueS+
tate(oMessage.grossWeightStatus));\n\t\t\tthis.byId(\"cubiscanVolume\").setValueState(this._determineValueState(oMessage.volumeStatus));\n\n\t\t\t// Close the busy dialog and show the details dialog.\n\t\t\tvar oBusyDialog = this.getView().byId(\"measure+
BusyDialog\");\n\t\t\toBusyDialog.setVisible(false).close();\n\t\t\tthis._getCubiscanDialog().setVisible(true);\n\t\t}\n\n\t\t//**********************************************************************************************\n\t\t//************************+
**********************************************************************\n\t});\n});",                                                                                                                                                                           
		"com/mscg/applications/cubiscan/measure/controller/BaseController.js": "/*global history */\nsap.ui.define([\n\t\t\"sap/ui/core/mvc/Controller\",\n\t\t\"sap/ui/core/routing/History\"\n\t], function (Controller, History) {\n\t\t\"use strict\";\n\n\t\tre+
turn Controller.extend(\"com.mscg.applications.cubiscan.measure.controller.BaseController\", {\n\t\t\t/**\n\t\t\t * Convenience method for accessing the router in every controller of the application.\n\t\t\t * @public\n\t\t\t * @returns {sap.ui.core.rout+
ing.Router} the router for this component\n\t\t\t */\n\t\t\tgetRouter : function () {\n\t\t\t\treturn this.getOwnerComponent().getRouter();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Convenience method for getting the view model by name in every controller of the +
application.\n\t\t\t * @public\n\t\t\t * @param {string} sName the model name\n\t\t\t * @returns {sap.ui.model.Model} the model instance\n\t\t\t */\n\t\t\tgetModel : function (sName) {\n\t\t\t\treturn this.getView().getModel(sName);\n\t\t\t},\n\n\t\t\t/*+
*\n\t\t\t * Convenience method for setting the view model in every controller of the application.\n\t\t\t * @public\n\t\t\t * @param {sap.ui.model.Model} oModel the model instance\n\t\t\t * @param {string} sName the model name\n\t\t\t * @returns {sap.ui.+
mvc.View} the view instance\n\t\t\t */\n\t\t\tsetModel : function (oModel, sName) {\n\t\t\t\treturn this.getView().setModel(oModel, sName);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Convenience method for getting the resource bundle.\n\t\t\t * @public\n\t\t\t * @+
returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component\n\t\t\t */\n\t\t\tgetResourceBundle : function () {\n\t\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Event h+
andler for navigating back.\n\t\t\t * It there is a history entry or an previous app-to-app navigation we go one step back in the browser history\n\t\t\t * If not, it will replace the current entry of the browser history with the master route.\n\t\t\t * +
@public\n\t\t\t */\n\t\t\tonNavBack : function() {\n\t\t\t\tvar sPreviousHash = History.getInstance().getPreviousHash(),\n\t\t\t\t\toCrossAppNavigator = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\n\t\t\t\t\tif (sPreviousHash !== u+
ndefined || !oCrossAppNavigator.isInitialNavigation()) {\n\t\t\t\t\thistory.go(-1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.getRouter().navTo(\"master\", {}, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\n\t}\n);",                                                     
		"com/mscg/applications/cubiscan/measure/Component.js": "sap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/Device\",\n\t\"com/mscg/applications/cubiscan/measure/model/models\",\n\t\"com/mscg/applications/cubiscan/measure/controller/ListSelecto+
r\",\n\t\"com/mscg/applications/cubiscan/measure/controller/ErrorHandler\"\n], function(UIComponent, Device, models, ListSelector, ErrorHandler, Configuration) {\n\t\"use strict\";\n\n\treturn UIComponent.extend(\"com.mscg.applications.cubiscan.measure.C+
omponent\", {\n\n\t\tmetadata: {\n\t\t\tmanifest: \"json\"\n\t\t},\n\n\t\t/**\n\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n\t\t * In this method, the FLP and device models are se+
t and the router is initialized.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tinit: function() {\n\t\t\tjQuery.sap.includeStyleSheet(sap.ui.resource(\"com.mscg.applications.cubiscan.measure\", \"css/style.css\"));\n\n\t\t\tthis.oListSelector = new Lis+
tSelector();\n\t\t\tthis._oErrorHandler = new ErrorHandler(this);\n\n\t\t\tthis._oCubiscanDevices = new jQuery.Deferred();\n\t\t\tthis._oFioriConfiguration = new jQuery.Deferred();\n\n\t\t\t// Load the Cubiscan device dataset.\n\t\t\tvar oModel = this.ge+
tModel();\n\t\t\toModel.read(\"/CubiscanDeviceSet\", {\n\t\t\t\tsuccess: function(oData, response) {\n\t\t\t\t\tvar oCubiscanDeviceModel = new sap.ui.model.json.JSONModel(oData);\n\t\t\t\t\tthis.setModel(oCubiscanDeviceModel, \"cubiscanDevices\");\n\n\t\+
t\t\t\t// Resolve the Deferred.\n\t\t\t\t\tthis._oCubiscanDevices.resolve();\n\t\t\t\t}.bind(this),\n\t\t\t\terror: function(oError) {\n\t\t\t\t\tthis._oCubiscanDevices.reject({\n\t\t\t\t\t\tmessage: \"Error retrieving cubiscan device information from ho+
st system.\\n\\n\" + oError.toString()\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Load the configuration dataset.\n\t\t\tvar oMscgCommonModel = this.getModel(\"mscgCommon\");\n\t\t\tvar aFilters = [];\n\t\t\taFilters.push(new sap.ui.model.Filter(\"+
application\", sap.ui.model.FilterOperator.EQ, \"CUBISCAN\"));\n\t\t\taFilters.push(new sap.ui.model.Filter(\"type\", sap.ui.model.FilterOperator.EQ, 2));\n\n\t\t\toMscgCommonModel.read(\"/ConfigurationSet\", {\n\t\t\t\tfilters: aFilters,\n\t\t\t\tsucces+
s: function(oData, response) {\n\t\t\t\t\tvar oObject = this._buildConfigViewModel(oData.results, this);\n\t\t\t\t\tvar oFioriConfigModel = new sap.ui.model.json.JSONModel(oObject);\n\t\t\t\t\tthis.setModel(oFioriConfigModel, \"fioriConfiguration\");\n\n+
\t\t\t\t\t// Resolve the deferred.\n\t\t\t\t\tthis._oFioriConfiguration.resolve();\n\t\t\t\t}.bind(this),\n\t\t\t\terror: function(oError) {\n\t\t\t\t\tthis._oFioriConfiguration.reject({\n\t\t\t\t\t\tmessage: \"Error retrieving configuration information +
from host system.\\n\\n\" + oError.toString()\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tjQuery.when(this._oCubiscanDevices, this._oFioriConfiguration).done(function() {\n\t\t\t\t// Publish an event so that the Worklist controller can load data.\n\t\t+
\t\tvar oEventBus = sap.ui.getCore().getEventBus();\n\t\t\t\toEventBus.publish(\"com.mscg.applications.cubiscan.measure.CubiscanDevices\", \"Loaded\");\n\t\t\t\toEventBus.publish(\"com.mscg.applications.cubiscan.measure.FioriConfiguration\", \"Loaded\");+
\n\t\t\t}).fail(function(oError) {\n\t\t\t\tsap.m.MessageBox.error(oError.message, {\n\t\t\t\t\tstyleClass: \"sapUiSizeCompact\"\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// set the device model\n\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\n\t\t\+
t// set the FLP model\n\t\t\tthis.setModel(models.createFLPModel(), \"FLP\");\n\n\t\t\t// call the base component's init function and create the App view\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\t// create the views based on the +
url/hash\n\t\t\tthis.getRouter().initialize();\n\t\t},\n\n\t\t/**\n\t\t * The component is destroyed by UI5 automatically.\n\t\t * In this method, the ListSelector and ErrorHandler are destroyed.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tdestroy: f+
unction() {\n\t\t\tthis.oListSelector.destroy();\n\t\t\tthis._oErrorHandler.destroy();\n\t\t\t// call the base component's destroy function\n\t\t\tUIComponent.prototype.destroy.apply(this, arguments);\n\t\t},\n\n\t\t/**\n\t\t * This method can be called +
to determine whether the sapUiSizeCompact or sapUiSizeCozy\n\t\t * design mode class should be set, which influences the size appearance of some controls.\n\t\t * @public\n\t\t * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - +
or an empty string if no css class should be set\n\t\t */\n\t\tgetContentDensityClass: function() {\n\t\t\tif (this._sContentDensityClass === undefined) {\n\t\t\t\t// check whether FLP has already set the content density class; do nothing in this case\n\+
t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCozy\") || jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\n\t\t\t\t\tthis._sContentDensityClass = \"\";\n\t\t\t\t} else if (!Device.support.touch) { // apply \"compact\" mode if touch is not s+
upported\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCompact\";\n\t\t\t\t} else {\n\t\t\t\t\t// \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n\t\t\t\t\tthis._sCon+
tentDensityClass = \"sapUiSizeCozy\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._sContentDensityClass;\n\t\t},\n\n\t\t_readCubiscanDevices: function() {\n\n\t\t},\n\n\t\t_readConfigurationData: function() {\n\n\t\t},\n\n\t\t_buildConfigViewModel: function(a+
Results, oController) {\n\t\t\tvar oObject = {};\n\n\t\t\tfor (var i = 0; i < aResults.length; i++) {\n\t\t\t\tvar keyParts = aResults[i].configKey.split(\".\");\n\t\t\t\tvar oParent = oObject;\n\n\t\t\t\tfor (var x = 0; x < keyParts.length; x++) {\n\t\t+
\t\t\tvar key = keyParts[x];\n\n\t\t\t\t\t// Is this the value node?\n\t\t\t\t\tif (x === keyParts.length - 1) {\n\t\t\t\t\t\t// Yes\n\t\t\t\t\t\toParent = oController._constructChild(oParent, key, aResults[i].configValue);\n\t\t\t\t\t} else {\n\t\t\t\t\+
t\t// No\n\t\t\t\t\t\toParent = oController._constructChild(oParent, key, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn oObject;\n\t\t},\n\n\t\t_constructChild: function(oParent, sNode, sValue) {\n\t\t\tif (sValue === null) {\n\t\t\t\t// Struct+
ure node.\n\t\t\t\tif (!oParent.hasOwnProperty(sNode)) {\n\t\t\t\t\toParent[sNode] = {};\n\t\t\t\t}\n\t\t\t\treturn oParent[sNode];\n\t\t\t} else {\n\t\t\t\t// Value node.\n\t\t\t\tif (sValue.toLowerCase() === \"true\" || sValue.toLowerCase() === \"false+
\") {\n\t\t\t\t\toParent[sNode] = sValue.toLowerCase() === \"true\";\n\t\t\t\t} else {\n\t\t\t\t\toParent[sNode] = sValue;\n\t\t\t\t}\n\t\t\t\treturn oParent;\n\t\t\t}\n\t\t}\n\t});\n});",                                                                   
		"com/mscg/applications/cubiscan/measure/model/formatter.js": "sap.ui.define([\n\t], function () {\n\t\t\"use strict\";\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Rounds the currency value to 2 digits\n\t\t\t *\n\t\t\t * @public\n\t\t\t * @param {string} sVal+
ue value to be formatted\n\t\t\t * @returns {string} formatted currency value with 2 digits\n\t\t\t */\n\t\t\tcurrencyValue : function (sValue) {\n\t\t\t\tif (!sValue) {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\n\t\t\t\treturn parseFloat(sValue).toFixed(2);\+
n\t\t\t}\n\t\t};\n\n\t}\n);",                                                                                                                                                                                                                                  
		"com/mscg/applications/cubiscan/measure/controller/Master.controller.js": "/*global history */\nsap.ui.define([\n\t\"com/mscg/applications/cubiscan/measure/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/core/routing/Histor+
y\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/m/GroupHeaderListItem\",\n\t\"sap/ui/Device\",\n\t\"com/mscg/applications/cubiscan/measure/model/formatter\"\n], function(BaseController, JSONModel, History, Filter, FilterOper+
ator, GroupHeaderListItem, Device, formatter) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"com.mscg.applications.cubiscan.measure.controller.Master\", {\n\n\t\tformatter: formatter,\n\n\t\t/* ==================================================+
========= */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Called when the master list controller is instantiated. It sets up the event han+
dling for the master/detail communication and other lifecycle tasks.\n\t\t * @public\n\t\t */\n\t\tonInit: function() {\n\t\t\t// Control state model\n\t\t\tvar oList = this.byId(\"list\");\n\t\t\tvar oViewModel = this._createViewModel();\n\t\t\tthis.set+
Model(oViewModel, \"masterView\");\n\n\t\t\t// Subscribe to the Fiori Configuration loaded channel so that once it is complete we can start the web socket connection.\n\t\t\tvar oEventBus = sap.ui.getCore().getEventBus();\n\t\t\toEventBus.subscribe(\"com+
.mscg.applications.cubiscan.measure.FioriConfiguration\", \"Loaded\", this.onFioriConfigurationLoaded, this);\n\n\t\t\t// Put down master list's original value for busy indicator delay,\n\t\t\t// so it can be restored later on. Busy handling on the maste+
r list is\n\t\t\t// taken care of by the master list itself.\n\t\t\tvar iOriginalBusyDelay = oList.getBusyIndicatorDelay();\n\n\t\t\t// Make sure, busy indication is showing immediately so there is no\n\t\t\t// break after the busy indication for loading+
 the view's meta data is\n\t\t\t// ended (see promise 'oWhenMetadataIsLoaded' in AppController)\n\t\t\toList.attachEventOnce(\"updateFinished\", function() {\n\t\t\t\t// Restore original busy indicator delay for the list\n\t\t\t\toViewModel.setProperty(\+
"/delay\", iOriginalBusyDelay);\n\t\t\t});\n\t\t\toList.attachEvent(\"updateFinished\", this.onListUpdated, this);\n\t\t\tthis._oList = oList;\n\n\t\t\tthis.getRouter().getRoute(\"master\").attachPatternMatched(this._onMasterMatched, this);\n\t\t\tthis.g+
etRouter().attachBypassed(this.onBypassed, this);\n\t\t},\n\n\t\tonExit: function() {\n\t\t\tvar oEventBus = sap.ui.getCore().getEventBus();\n\t\t\toEventBus.unsubscribe(\"com.mscg.applications.cubiscan.measure.FioriConfiguration\", \"Loaded\", this.onFi+
oriConfigurationLoaded, this);\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\+
n\n\t\tonFioriConfigurationLoaded: function(sChannel, sEvent, oData) {\n\t\t\t// Bind the warehouse number input.\n\t\t\tvar oWarehouseNumberInput = this.byId(\"warehouseNumberInput\");\n\t\t\tvar oFioriConfigurationModel = this.getOwnerComponent().getMo+
del(\"fioriConfiguration\");\n\t\t\toWarehouseNumberInput.setModel(oFioriConfigurationModel);\n\t\t\toWarehouseNumberInput.bindValue({\n\t\t\t\tpath: \"/user/defaults/warehouseNumber\"\n\t\t\t});\n\n\t\t\t// Define the filters for use in the binding of t+
he items.\n\t\t\tvar aFilters = this._constructFilters();\n\t\t\tthis._bindHeaderData(this._oList, aFilters, null);\n\n\t\t\t// Fire a message into the pub sub queue for any listeners.\n\t\t\tvar oEventBus = sap.ui.getCore().getEventBus();\n\t\t\toEventB+
us.publish(\"com.mscg.applications.cubiscan.measure.WarehouseNumber\", \"Changed\", {\n\t\t\t\twarehouseNumber: oFioriConfigurationModel.getProperty(\"/user/defaults/warehouseNumber\")\n\t\t\t});\n\t\t},\n\n\t\tonListUpdated: function() {\n\t\t\tthis.get+
OwnerComponent().oListSelector.oWhenListLoadingIsDone.then(\n\t\t\t\tfunction(mParams) {\n\t\t\t\t\tif (mParams.list.getMode() === \"None\") {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tvar oBindingContext = mParams.firstListitem.getBindingContext();\n+
\t\t\t\t\tthis.getOwnerComponent().oListSelector.selectAListItem(oBindingContext.getPath());\n\t\t\t\t\tthis._showDetail(mParams.firstListitem);\n\t\t\t\t}.bind(this),\n\t\t\t\tfunction(mParams) {\n\t\t\t\t\tif (mParams.error) {\n\t\t\t\t\t\treturn;\n\t\+
t\t\t\t}\n\t\t\t\t\tthis.getRouter().getTargets().display(\"detailNoObjectsAvailable\");\n\t\t\t\t}.bind(this)\n\t\t\t);\n\t\t},\n\n\t\tonWarehouseNumberValueHelpRequest: function(oEvent) {\n\t\t\tvar handleClose = function(oEventObj) {\n\t\t\t\tvar oSel+
ectedItem = oEventObj.getParameter(\"selectedItem\");\n\t\t\t\tif (oSelectedItem) {\n\t\t\t\t\tthis.byId(\"warehouseNumberInput\").setValue(oSelectedItem.getTitle());\n\t\t\t\t}\n\n\t\t\t\t// Create the filters and refresh.\n\t\t\t\tvar filters = this._c+
onstructFilters();\n\t\t\t\tthis._oList.unbindAggregation(\"items\");\n\t\t\t\tthis._bindHeaderData(this._oList, filters, null);\n\n\t\t\t\t// Fire a message into the pub sub queue for any listeners.\n\t\t\t\tvar oEventBus = sap.ui.getCore().getEventBus(+
);\n\t\t\t\toEventBus.publish(\"com.mscg.applications.cubiscan.measure.WarehouseNumber\", \"Changed\", {\n\t\t\t\t\twarehouseNumber: oSelectedItem.getTitle()\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tvar selDialog = new sap.m.SelectDialog({\n\t\t\t\ttitle: \"Wareh+
ouses\",\n\t\t\t\titems: {\n\t\t\t\t\tpath: \"/WarehouseNumberSet\",\n\t\t\t\t\ttemplate: new sap.m.StandardListItem({\n\t\t\t\t\t\ttitle: \"{warehouseNumber}\",\n\t\t\t\t\t\tdescription: \"{description}\",\n\t\t\t\t\t\tactive: true\n\t\t\t\t\t})\n\t\t\t+
\t},\n\t\t\t\tconfirm: [handleClose, this],\n\t\t\t\tcancel: [handleClose, this]\n\t\t\t});\n\t\t\tselDialog.setModel(this.getOwnerComponent().getModel(\"mscgCommon\"));\n\n\t\t\t// toggle compact style\n\t\t\tjQuery.sap.syncStyleClass(\"sapUiSizeCompact+
\", this.getView(), selDialog);\n\t\t\tselDialog.open();\n\t\t},\n\n\t\t/**\n\t\t * After list data is available, this handler method updates the\n\t\t * master list counter and hides the pull to refresh control, if\n\t\t * necessary.\n\t\t * @param {sap+
.ui.base.Event} oEvent the update finished event\n\t\t * @public\n\t\t */\n\t\tonUpdateFinished: function(oEvent) {\n\t\t\t// update the master list object counter after new data is loaded\n\t\t\tthis._updateListItemCount(oEvent.getParameter(\"total\"));+
\n\t\t\t// hide pull to refresh if necessary\n\t\t\tthis.byId(\"pullToRefresh\").hide();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the master search field. Applies current\n\t\t * filter value and triggers a new search. If the search field's\n\t\t * '+
refresh' button has been pressed, no new search is triggered\n\t\t * and the list binding is refresh instead.\n\t\t * @param {sap.ui.base.Event} oEvent the search event\n\t\t * @public\n\t\t */\n\t\tonSearch: function(oEvent) {\n\t\t\tif (oEvent.getParam+
eters().refreshButtonPressed) {\n\t\t\t\t// Search field's 'refresh' button has been pressed.\n\t\t\t\t// This is visible if you select any master list item.\n\t\t\t\t// In this case no new search is triggered, we only\n\t\t\t\t// refresh the list bindin+
g.\n\t\t\t\tthis.onRefresh();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Update the filters and search.\n\t\t\tvar sQuery = oEvent.getParameter(\"query\");\n\t\t\tvar filters = this._constructFilters();\n\t\t\tthis._oList.unbindAggregation(\"items\");\n\t\t\t+
this._bindHeaderData(this._oList, filters, sQuery);\n\t\t},\n\n\t\t/**\n\t\t * Event handler for refresh event. Keeps filter, sort\n\t\t * and group settings and refreshes the list binding.\n\t\t * @public\n\t\t */\n\t\tonRefresh: function() {\n\t\t\tthi+
s._oList.getBinding(\"items\").refresh();\n\t\t},\n\n\t\t/**\n\t\t * Event handler for the list selection event\n\t\t * @param {sap.ui.base.Event} oEvent the list selectionChange event\n\t\t * @public\n\t\t */\n\t\tonSelectionChange: function(oEvent) {\n+
\t\t\t// get the list item, either from the listItem parameter or from the event's source itself (will depend on the device-dependent mode).\n\t\t\tthis._showDetail(oEvent.getParameter(\"listItem\") || oEvent.getSource());\n\t\t},\n\n\t\t/**\n\t\t * Even+
t handler for the bypassed event, which is fired when no routing pattern matched.\n\t\t * If there was an object selected in the master list, that selection is removed.\n\t\t * @public\n\t\t */\n\t\tonBypassed: function() {\n\t\t\tthis._oList.removeSelec+
tions(true);\n\t\t},\n\n\t\t/**\n\t\t * Used to create GroupHeaders with non-capitalized caption.\n\t\t * These headers are inserted into the master list to\n\t\t * group the master list's items.\n\t\t * @param {Object} oGroup group whose text is to be d+
isplayed\n\t\t * @public\n\t\t * @returns {sap.m.GroupHeaderListItem} group header with non-capitalized caption.\n\t\t */\n\t\tcreateGroupHeader: function(oGroup) {\n\t\t\treturn new GroupHeaderListItem({\n\t\t\t\ttitle: oGroup.text,\n\t\t\t\tupperCase: +
false\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Event handler for navigating back.\n\t\t * It there is a history entry or an previous app-to-app navigation we go one step back in the browser history\n\t\t * If not, it will navigate to the shell home\n\t\t * +
@public\n\t\t */\n\t\tonNavBack: function() {\n\t\t\tvar sPreviousHash = History.getInstance().getPreviousHash(),\n\t\t\t\toCrossAppNavigator = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\n\t\t\tif (sPreviousHash !== undefined || !+
oCrossAppNavigator.isInitialNavigation()) {\n\t\t\t\thistory.go(-1);\n\t\t\t} else {\n\t\t\t\toCrossAppNavigator.toExternal({\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\tshellHash: \"#Shell-home\"\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t/* ==============+
============================================= */\n\t\t/* begin: internal methods                                     */\n\t\t/* =========================================================== */\n\n\t\t_bindHeaderData: function(oList, aFilters, sQuery) {\n\t+
\t\tif (sQuery) {\n\t\t\t\taFilters.push(new Filter(\"product\", FilterOperator.Contains, sQuery));\n\t\t\t}\n\n\t\t\t// Bind the list.\n\t\t\tvar itemTemplate = new sap.m.ObjectListItem({\n\t\t\t\tpress: \"onSelectionChange\",\n\t\t\t\ttitle: \"{product+
}\",\n\t\t\t\ticon: \"{productImage}\",\n\t\t\t\tattributes: [{\n\t\t\t\t\ttext: \"{productDescription}\"\n\t\t\t\t}]\n\t\t\t});\n\n\t\t\toList.bindAggregation(\"items\", {\n\t\t\t\tpath: \"/WorklistHeaderSet\",\n\t\t\t\ttemplate: itemTemplate,\n\t\t\t\t+
sorter: {\n\t\t\t\t\tpath: \"product\",\n\t\t\t\t\tdescending: false\n\t\t\t\t},\n\t\t\t\tgroupHeaderFactory: \".createGroupHeader\",\n\t\t\t\tfilters: aFilters\n\t\t\t});\n\n\t\t\t// Bind the list to the ListSelector so that the selection functions work+
.\n\t\t\tthis.getOwnerComponent().oListSelector.setBoundMasterList(oList);\n\t\t},\n\n\t\t_constructFilters: function() {\n\t\t\tvar filters = new Array();\n\n\t\t\t// Define the filters for use in the binding of the items.\n\t\t\tvar warehouseFilter = n+
ew sap.ui.model.Filter(\"warehouseNumber\", sap.ui.model.FilterOperator.EQ, this.getOwnerComponent().getModel(\n\t\t\t\t\"fioriConfiguration\").getProperty(\n\t\t\t\t\"/user/defaults/warehouseNumber\"));\n\t\t\tfilters.push(warehouseFilter);\n\n\t\t\tret+
urn filters;\n\t\t},\n\n\t\t_createViewModel: function() {\n\t\t\treturn new JSONModel({\n\t\t\t\tisFilterBarVisible: false,\n\t\t\t\tfilterBarLabel: \"\",\n\t\t\t\tdelay: 0,\n\t\t\t\ttitle: this.getResourceBundle().getText(\"masterTitleCount\", [0]),\n\+
t\t\t\tnoDataText: this.getResourceBundle().getText(\"masterListNoDataText\"),\n\t\t\t\tsortBy: \"product\",\n\t\t\t\tgroupBy: \"None\",\n\t\t\t\tselectedWorklistCategory: \"INB\"\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * If the master route was hit (empty h+
ash) we have to set\n\t\t * the hash to to the first item in the list as soon as the\n\t\t * listLoading is done and the first item in the list is known\n\t\t * @private\n\t\t */\n\t\t_onMasterMatched: function() {},\n\n\t\t/**\n\t\t * Shows the selected+
 item on the detail page\n\t\t * On phones a additional history entry is created\n\t\t * @param {sap.m.ObjectListItem} oItem selected Item\n\t\t * @private\n\t\t */\n\t\t_showDetail: function(oItem) {\n\t\t\tvar bReplace = !Device.system.phone;\n\t\t\tth+
is.getRouter().navTo(\"object\", {\n\t\t\t\twarehouse: oItem.getBindingContext().getProperty(\"warehouseNumber\"),\n\t\t\t\tproduct: oItem.getBindingContext().getProperty(\"product\"),\n\t\t\t\ttimestamp: new Date().getTime()\n\t\t\t}, bReplace);\n\t\t},+
\n\n\t\t/**\n\t\t * Sets the item count on the master list header\n\t\t * @param {integer} iTotalItems the total number of items in the list\n\t\t * @private\n\t\t */\n\t\t_updateListItemCount: function(iTotalItems) {\n\t\t\tvar sTitle;\n\t\t\t// only up+
date the counter if the length is final\n\t\t\tif (this._oList.getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tsTitle = this.getResourceBundle().getText(\"masterTitleCount\", [iTotalItems]);\n\t\t\t\tthis.getModel(\"masterView\").setProperty(\"/title\"+
, sTitle);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Internal helper method to apply both filter and search state together on the list binding\n\t\t * @private\n\t\t */\n\t\t/*_applyFilterSearch: function() {\n\t\t\tvar aFilters = this._oListFilterState.aSearc+
h.concat(this._oListFilterState.aFilter),\n\t\t\t\toViewModel = this.getModel(\"masterView\");\n\t\t\tthis._oList.getBinding(\"items\").filter(aFilters, \"Application\");\n\t\t\t// changes the noDataText of the list in case there are no filter results\n\+
t\t\tif (aFilters.length !== 0) {\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataWithFilterOrSearchText\"));\n\t\t\t} else if (this._oListFilterState.aSearch.length > 0) {\n\t\t\t\t// only reset the no+
 data text to default when no new search was triggered\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataText\"));\n\t\t\t}\n\t\t},*/\n\n\t\t/**\n\t\t * Internal helper method to apply both group and sort+
 state together on the list binding\n\t\t * @param {sap.ui.model.Sorter[]} aSorters an array of sorters\n\t\t * @private\n\t\t */\n\t\t_applyGroupSort: function(aSorters) {\n\t\t\tthis._oList.getBinding(\"items\").sort(aSorters);\n\t\t},\n\n\t\t/**\n\t\t+
 * Internal helper method that sets the filter bar visibility property and the label's caption to be shown\n\t\t * @param {string} sFilterBarText the selected filter value\n\t\t * @private\n\t\t */\n\t\t_updateFilterBar: function(sFilterBarText) {\n\t\t\+
tvar oViewModel = this.getModel(\"masterView\");\n\t\t\toViewModel.setProperty(\"/isFilterBarVisible\", (this._oListFilterState.aFilter.length > 0));\n\t\t\toViewModel.setProperty(\"/filterBarLabel\", this.getResourceBundle().getText(\"masterFilterBarTex+
t\", [sFilterBarText]));\n\t\t}\n\t});\n});",                                                                                                                                                                                                                  
		"com/mscg/applications/cubiscan/measure/controller/ErrorHandler.js": "sap.ui.define([\n\t\t\"sap/ui/base/Object\",\n\t\t\"sap/m/MessageBox\"\n\t], function (UI5Object, MessageBox) {\n\t\t\"use strict\";\n\n\t\treturn UI5Object.extend(\"com.mscg.applica+
tions.cubiscan.measure.controller.ErrorHandler\", {\n\n\t\t\t/**\n\t\t\t * Handles application errors by automatically attaching to the model events and displaying errors when needed.\n\t\t\t * @class\n\t\t\t * @param {sap.ui.core.UIComponent} oComponent+
 reference to the app's component\n\t\t\t * @public\n\t\t\t * @alias com.mscg.applications.cubiscan.measure.controller.ErrorHandler\n\t\t\t */\n\t\t\tconstructor : function (oComponent) {\n\t\t\t\tthis._oResourceBundle = oComponent.getModel(\"i18n\").get+
ResourceBundle();\n\t\t\t\tthis._oComponent = oComponent;\n\t\t\t\tthis._oModel = oComponent.getModel();\n\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\tthis._sErrorText = this._oResourceBundle.getText(\"errorText\");\n\n\t\t\t\tthis._oModel.attachMetadata+
Failed(function (oEvent) {\n\t\t\t\t\tvar oParams = oEvent.getParameters();\n\t\t\t\t\tthis._showServiceError(oParams.response);\n\t\t\t\t}, this);\n\n\t\t\t\tthis._oModel.attachRequestFailed(function (oEvent) {\n\t\t\t\t\tvar oParams = oEvent.getParamet+
ers();\n\t\t\t\t\t// An entity that was not found in the service is also throwing a 404 error in oData.\n\t\t\t\t\t// We already cover this case with a notFound target so we skip it here.\n\t\t\t\t\t// A request that cannot be sent to the server is a tec+
hnical error that we have to handle though\n\t\t\t\t\tif (oParams.response.statusCode !== \"404\" || (oParams.response.statusCode === 404 && oParams.response.responseText.indexOf(\"Cannot POST\") === 0)) {\n\t\t\t\t\t\tthis._showServiceError(oParams.resp+
onse);\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Shows a {@link sap.m.MessageBox} when a service call has failed.\n\t\t\t * Only the first error message will be display.\n\t\t\t * @param {string} sDetails a technical error to be di+
splayed on request\n\t\t\t * @private\n\t\t\t */\n\t\t\t_showServiceError : function (sDetails) {\n\t\t\t\tif (this._bMessageOpen) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._bMessageOpen = true;\n\t\t\t\tMessageBox.error(\n\t\t\t\t\tthis._sErrorText,+
\n\t\t\t\t\t{\n\t\t\t\t\t\tid : \"serviceErrorMessageBox\",\n\t\t\t\t\t\tdetails : sDetails,\n\t\t\t\t\t\tstyleClass : this._oComponent.getContentDensityClass(),\n\t\t\t\t\t\tactions : [MessageBox.Action.CLOSE],\n\t\t\t\t\t\tonClose : function () {\n\t\t+
\t\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\t\t\t}.bind(this)\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t});\n\n\t}\n);",                                                                                                                                      
		"com/mscg/applications/cubiscan/measure/controller/App.controller.js": "sap.ui.define([\n\t\"com/mscg/applications/cubiscan/measure/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\"\n], function(BaseController, JSONModel) {\n\t\"use stric+
t\";\n\n\treturn BaseController.extend(\"com.mscg.applications.cubiscan.measure.controller.App\", {\n\n\t\tonInit: function() {\n\t\t\tvar oViewModel,\n\t\t\t\tfnSetAppNotBusy,\n\t\t\t\toListSelector = this.getOwnerComponent().oListSelector,\n\t\t\t\tiOr+
iginalBusyDelay = this.getView().getBusyIndicatorDelay();\n\t\t\t\t\n\t\t\toViewModel = new JSONModel({\n\t\t\t\tbusy: true,\n\t\t\t\tdelay: 0\n\t\t\t});\n\t\t\tthis.setModel(oViewModel, \"appView\");\n\n\t\t\tfnSetAppNotBusy = function() {\n\t\t\t\toVie+
wModel.setProperty(\"/busy\", false);\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t};\n\n\t\t\tthis.getOwnerComponent().getModel().metadataLoaded()\n\t\t\t\t.then(fnSetAppNotBusy);\n\n\t\t\t// Makes sure that master view is hid+
den in split app\n\t\t\t// after a new list entry has been selected.\n\t\t\toListSelector.attachListSelectionChange(function() {\n\t\t\t\tthis.byId(\"idAppControl\").hideMaster();\n\t\t\t}, this);\n\n\t\t\t// apply content density mode to root view\n\t\t+
\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t}\n\t});\n});",                                                                                                                                                        
		"com/mscg/applications/cubiscan/measure/controller/ListSelector.js": "sap.ui.define([\n\t\"sap/ui/base/Object\"\n], function(BaseObject) {\n\t\"use strict\";\n\n\treturn BaseObject.extend(\"com.mscg.applications.cubiscan.measure.model.ListSelector\", {+
\n\n\t\t/**\n\t\t * Provides a convenience API for selecting list items. All the functions will wait until the initial load of the a List passed to the instance by the setBoundMasterList\n\t\t * function.\n\t\t * @class\n\t\t * @public\n\t\t * @alias com+
.mscg.applications.cubiscan.measure.model.ListSelector\n\t\t */\n\n\t\tconstructor: function() {\n\t\t\tthis._oWhenListHasBeenSet = new Promise(function(fnResolveListHasBeenSet) {\n\t\t\t\tthis._fnResolveListHasBeenSet = fnResolveListHasBeenSet;\n\t\t\t}+
.bind(this));\n\t\t},\n\n\t\t/**\n\t\t * A bound list should be passed in here. Should be done, before the list has received its initial data from the server.\n\t\t * May only be invoked once per ListSelector instance.\n\t\t * @param {sap.m.List} oList T+
he list all the select functions will be invoked on.\n\t\t * @public\n\t\t */\n\t\tsetBoundMasterList: function(oList) {\n\t\t\tthis._oList = oList;\n\t\t\tthis._fnResolveListHasBeenSet(oList);\n\n\t\t\t// This promise needs to be created in the construc+
tor, since it is allowed to\n\t\t\t// invoke selectItem functions before calling setBoundMasterList\n\t\t\tthis.oWhenListLoadingIsDone = new Promise(function(fnResolve, fnReject) {\n\t\t\t\t// Used to wait until the setBound masterList function is invoke+
d\n\t\t\t\tthis._oWhenListHasBeenSet\n\t\t\t\t\t.then(function() {\n\t\t\t\t\t\toList.getBinding(\"items\").attachEvent(\"dataReceived\",\n\t\t\t\t\t\t\tfunction(oData) {\n\t\t\t\t\t\t\t\tif (!oData.getParameter(\"data\")) {\n\t\t\t\t\t\t\t\t\tfnReject({+
\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\terror: true\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar oFirstListItem = oList.getItems()[0];\n\t\t\t\t\t\t\t\tif (oFirstListItem) {\n\t\t\t\t\t\t\t\t\t// Have to make sure that f+
irst list Item is selected\n\t\t\t\t\t\t\t\t\t// and a select event is triggered. Like that, the corresponding\n\t\t\t\t\t\t\t\t\t// detail page is loaded automatically\n\t\t\t\t\t\t\t\t\tfnResolve({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\+
tfirstListitem: oFirstListItem\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// No items in the list\n\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\terror: false\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\+
t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}.bind(this));\n\t\t},\n\n\t\t/**\n\t\t * Tries to select and scroll to a list item with a matching binding context. If there are no items matching the binding context or the ListMode is non+
e,\n\t\t * no selection/scrolling will happen\n\t\t * @param {string} sBindingPath the binding path matching the binding path of a list item\n\t\t * @public\n\t\t */\n\t\tselectAListItem: function(sBindingPath) {\n\n\t\t\tthis.oWhenListLoadingIsDone.then+
(\n\t\t\t\tfunction() {\n\t\t\t\t\tvar oList = this._oList,\n\t\t\t\t\t\toSelectedItem;\n\n\t\t\t\t\tif (oList.getMode() === \"None\") {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\toSelectedItem = oList.getSelectedItem();\n\n\t\t\t\t\t// skip update i+
f the current selection is already matching the object path\n\t\t\t\t\tif (oSelectedItem && oSelectedItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\toList.getItems().some(function(oItem) {\n\t\t\t\t\t+
\tif (oItem.getBindingContext() && oItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\t\toList.setSelectedItem(oItem);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}.bind(this),\n\t\t\t\tfunction() {\n\t\t\t\t\tjQue+
ry.sap.log.warning(\"Could not select the list item with the path\" + sBindingPath +\n\t\t\t\t\t\t\" because the list encountered an error or had no items\");\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/* ========================================================+
=== */\n\t\t/* Convenience Functions for List Selection Change Event       */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Attaches a listener and listener function to the ListSelector's bound master list. By +
using\n\t\t * a promise, the listener is added, even if the list is not available when 'attachListSelectionChange'\n\t\t * is called.\n\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t * @p+
aram {function} oListener the listener object\n\t\t * @return {com.mscg.applications.cubiscan.measure.model.ListSelector} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tattachListSelectionChange: function(fnFunction, oListener+
) {\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.attachSelectionChange(fnFunction, oListener);\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Detaches a listener and listener function from the ListSelector+
's bound master list. By using\n\t\t * a promise, the listener is removed, even if the list is not available when 'detachListSelectionChange'\n\t\t * is called.\n\t\t * @param {function} fnFunction the function to be executed when the list fires a select+
ion change event\n\t\t * @param {function} oListener the listener object\n\t\t * @return {com.mscg.applications.cubiscan.measure.model.ListSelector} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tdetachListSelectionChange: fun+
ction(fnFunction, oListener) {\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.detachSelectionChange(fnFunction, oListener);\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Removes all selections from master l+
ist.\n\t\t * Does not trigger 'selectionChange' event on master list, though.\n\t\t * @public\n\t\t */\n\t\tclearMasterListSelection: function() {\n\t\t\t//use promise to make sure that 'this._oList' is available\n\t\t\tthis._oWhenListHasBeenSet.then(fun+
ction() {\n\t\t\t\tthis._oList.removeSelections(true);\n\t\t\t}.bind(this));\n\t\t}\n\t});\n});",                                                                                                                                                              
		"com/mscg/applications/cubiscan/measure/localService/mockserver.js": "sap.ui.define([\n\t\t\"sap/ui/core/util/MockServer\"\n\t], function (MockServer) {\n\t\t\"use strict\";\n\n\t\tvar oMockServer,\n\t\t\t_sAppModulePath = \"com/mscg/applications/cubis+
can/measure/\",\n\t\t\t_sJsonFilesModulePath = _sAppModulePath + \"localService/mockdata\";\n\n\t\treturn {\n\t\t\t/**\n\t\t\t * Initializes the mock server.\n\t\t\t * You can configure the delay with the URL parameter \"serverDelay\".\n\t\t\t * The loca+
l mock data in this folder is returned instead of the real data for testing.\n\t\t\t * @public\n\t\t\t */\n\n\t\t\tinit : function () {\n\t\t\t\tvar oUriParameters = jQuery.sap.getUriParameters(),\n\t\t\t\t\tsJsonFilesUrl = jQuery.sap.getModulePath(_sJso+
nFilesModulePath),\n\t\t\t\t\tsManifestUrl = jQuery.sap.getModulePath(_sAppModulePath + \"manifest\", \".json\"),\n\t\t\t\t\tsEntity = \"WorklistHeaderSet\",\n\t\t\t\t\tsErrorParam = oUriParameters.get(\"errorType\"),\n\t\t\t\t\tiErrorCode = sErrorParam +
=== \"badRequest\" ? 400 : 500,\n\t\t\t\t\toManifest = jQuery.sap.syncGetJSON(sManifestUrl).data,\n\t\t\t\t\toMainDataSource = oManifest[\"sap.app\"].dataSources.mainService,\n\t\t\t\t\tsMetadataUrl = jQuery.sap.getModulePath(_sAppModulePath + oMainDataS+
ource.settings.localUri.replace(\".xml\", \"\"), \".xml\"),\n\t\t\t\t\t// ensure there is a trailing slash\n\t\t\t\t\tsMockServerUrl = /.*\\/$/.test(oMainDataSource.uri) ? oMainDataSource.uri : oMainDataSource.uri + \"/\";\n\n\t\t\t\toMockServer = new Mo+
ckServer({\n\t\t\t\t\trootUri : sMockServerUrl\n\t\t\t\t});\n\n\t\t\t\t// configure mock server with a delay of 1s\n\t\t\t\tMockServer.config({\n\t\t\t\t\tautoRespond : true,\n\t\t\t\t\tautoRespondAfter : (oUriParameters.get(\"serverDelay\") || 1000)\n\t+
\t\t\t});\n\n\t\t\t\toMockServer.simulate(sMetadataUrl, {\n\t\t\t\t\tsMockdataBaseUrl : sJsonFilesUrl,\n\t\t\t\t\tbGenerateMissingMockData : true\n\t\t\t\t});\n\n\t\t\t\tvar aRequests = oMockServer.getRequests(),\n\t\t\t\t\tfnResponse = function (iErrCod+
e, sMessage, aRequest) {\n\t\t\t\t\t\taRequest.response = function(oXhr){\n\t\t\t\t\t\t\toXhr.respond(iErrCode, {\"Content-Type\": \"text/plain;charset=utf-8\"}, sMessage);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t// handling the metadata error test\n\t\+
t\t\tif (oUriParameters.get(\"metadataError\")) {\n\t\t\t\t\taRequests.forEach( function ( aEntry ) {\n\t\t\t\t\t\tif (aEntry.path.toString().indexOf(\"$metadata\") > -1) {\n\t\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\n\t\t\t\t\t\t}\n\t\t\+
t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Handling request errors\n\t\t\t\tif (sErrorParam) {\n\t\t\t\t\taRequests.forEach( function ( aEntry ) {\n\t\t\t\t\t\tif (aEntry.path.toString().indexOf(sEntity) > -1) {\n\t\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, +
aEntry);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\toMockServer.start();\n\n\t\t\t\tjQuery.sap.log.info(\"Running the app with mock data\");\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @public returns the mockserver of the app, should be used in integration +
tests\n\t\t\t * @returns {sap.ui.core.util.MockServer} the mockserver instance\n\t\t\t */\n\t\t\tgetMockServer : function () {\n\t\t\t\treturn oMockServer;\n\t\t\t}\n\t\t};\n\n\t}\n);",                                                                      
		"com/mscg/applications/cubiscan/measure/view/Master.view.xml": "<mvc:View controllerName=\"com.mscg.applications.cubiscan.measure.controller.Master\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns:core=\"sap.ui.core\"\n\txmlns=\"sap.m\" xmlns:l=\"sap.ui.layout\" +
xmlns:semantic=\"sap.m.semantic\">\n\t<semantic:MasterPage id=\"page\" title=\"{masterView>/title}\" navButtonPress=\"onNavBack\" showNavButton=\"true\">\n\t\t<semantic:subHeader>\n\t\t\t<Bar id=\"headerBar\">\n\t\t\t\t<contentMiddle>\n\t\t\t\t\t<SearchF+
ield id=\"searchField\" showRefreshButton=\"{= !${device>/support/touch} }\" tooltip=\"{i18n>masterSearchTooltip}\" width=\"100%\"\n\t\t\t\t\t\tsearch=\"onSearch\"></SearchField>\n\t\t\t\t\t<Input type=\"Text\" showValueHelp=\"true\"></Input>\n\t\t\t\t</+
contentMiddle>\n\t\t\t</Bar>\n\t\t</semantic:subHeader>\n\t\t<semantic:content>\n\t\t\t<l:Grid hSpacing=\"0\" vSpacing=\"0\" defaultSpan=\"L6 M6 S6\">\n\t\t\t\t<l:content>\n\t\t\t\t\t<Label text=\"Warehouse Number:\" labelFor=\"warehouseNumberInput\" tex+
tAlign=\"Left\" class=\"mscgFilterField\">\n\t\t\t\t\t\t<layoutData>\n\t\t\t\t\t\t\t<l:GridData span=\"L6 M6 S6\"/>\n\t\t\t\t\t\t</layoutData>\n\t\t\t\t\t</Label>\n\t\t\t\t\t<Input id=\"warehouseNumberInput\" type=\"Text\" showValueHelp=\"true\" valueHel+
pOnly=\"true\" width=\"120px\"\n\t\t\t\t\t\tvalueHelpRequest=\"onWarehouseNumberValueHelpRequest\">\n\t\t\t\t\t\t<layoutData>\n\t\t\t\t\t\t\t<l:GridData span=\"L6 M6 S6\"/>\n\t\t\t\t\t\t</layoutData>\n\t\t\t\t\t</Input>\n\t\t\t\t</l:content>\n\t\t\t</l:G+
rid>\n\t\t\t<PullToRefresh id=\"pullToRefresh\" visible=\"{device>/support/touch}\" refresh=\"onRefresh\"/>\n\t\t\t<!-- For client side filtering add this to the items attribute:  parameters: {operationMode: 'Client'}}\" -->\n\t\t\t<List id=\"list\" busy+
IndicatorDelay=\"{masterView>/delay}\" noDataText=\"{masterView>/noDataText}\"\n\t\t\t\tmode=\"{= ${device>/system/phone} ? 'None' : 'SingleSelectMaster'}\" growing=\"true\" growingScrollToLoad=\"true\"\n\t\t\t\tupdateFinished=\"onUpdateFinished\" select+
ionChange=\"onSelectionChange\">\n\t\t\t\t<infoToolbar>\n\t\t\t\t\t<Toolbar active=\"true\" id=\"filterBar\" visible=\"{masterView>/isFilterBarVisible}\" press=\"onOpenViewSettings\">\n\t\t\t\t\t\t<Title id=\"filterBarLabel\" text=\"{masterView>/filterBa+
rLabel}\"/>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</infoToolbar>\n\t\t\t</List>\n\t\t</semantic:content>\n\t</semantic:MasterPage>\n</mvc:View>",                                                                                                                     
		"com/mscg/applications/cubiscan/measure/lib/Configuration.js": "sap.ui.define([\r\n\t\"sap/ui/base/Object\",\r\n\t\"sap/ui/model/json/JSONModel\"\r\n], function(Object, JSONModel) {\r\n\t\"use strict\";\r\n\treturn Object.extend(\"com.mscg.applications+
.common.Configuration\", {\r\n\t\t_oModel: null,\r\n\t\t_sConfigurationSetName: null,\r\n\t\t_oConfigModel: null,\r\n\r\n\t\tconstructor: function(data) {\r\n\t\t\tif (data) {\r\n\t\t\t\tthis._oModel = data.model;\r\n\t\t\t\tthis._sConfigurationSetName =+
 data.configurationSetName;\r\n\r\n\t\t\t\tthis._oModel.read(this.sConfigurationSetName, {\r\n\t\t\t\t\tsuccess: function(oData, response) {\r\n\t\t\t\t\t\tvar oObject = this._buildConfigModel(oData.results, this);\r\n\t\t\t\t\t\tthis._oConfigModel = new+
 JSONModel(oObject);\r\n\t\t\t\t\t},\r\n\t\t\t\t\terror: function(oError) {\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetConfigModel: function() {\r\n\t\t\treturn this._oConfigModel;\r\n\t\t},\r\n\r\n\t\t_buildConfigModel: functio+
n(aResults) {\r\n\t\t\tvar oObject = {};\r\n\r\n\t\t\tfor (var i = 0; i < aResults.length; i++) {\r\n\t\t\t\tvar keyParts = aResults[i].configKey.split(\".\");\r\n\t\t\t\tvar oParent = oObject;\r\n\r\n\t\t\t\tfor (var x = 0; x < keyParts.length; x++) {\r+
\n\t\t\t\t\tvar key = keyParts[x];\r\n\r\n\t\t\t\t\t// Is this the value node?\r\n\t\t\t\t\tif (x === keyParts.length - 1) {\r\n\t\t\t\t\t\t// Yes\r\n\t\t\t\t\t\toParent = this._constructChild(oParent, key, aResults[i].configValue);\r\n\t\t\t\t\t} else {+
\r\n\t\t\t\t\t\t// No\r\n\t\t\t\t\t\toParent = this._constructChild(oParent, key, null);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn oObject;\r\n\t\t},\r\n\r\n\t\t_constructChild: function(oParent, sNode, sValue) {\r\n\t\t\tif (sValue === +
null) {\r\n\t\t\t\t// Structure node.\r\n\t\t\t\toParent[sNode] = {};\r\n\t\t\t\treturn oParent[sNode];\r\n\t\t\t} else {\r\n\t\t\t\t// Value node.\r\n\t\t\t\toParent[sNode] = sValue;\r\n\t\t\t\treturn oParent;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n});",       
		"com/mscg/applications/cubiscan/measure/model/models.js": "sap.ui.define([\n\t\t\"sap/ui/model/json/JSONModel\",\n\t\t\"sap/ui/Device\"\n\t], function (JSONModel, Device) {\n\t\t\"use strict\";\n\n\t\treturn {\n\t\t\tcreateDeviceModel : function () {\n+
\t\t\t\tvar oModel = new JSONModel(Device);\n\t\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\t\treturn oModel;\n\t\t\t},\n\n\t\t\tcreateFLPModel : function () {\n\t\t\t\tvar fnGetuser = jQuery.sap.getObject(\"sap.ushell.Container.getUser\"),\n\t\+
t\t\t\tbIsShareInJamActive = fnGetuser ? fnGetuser().isJamActive() : false,\n\t\t\t\t\toModel = new JSONModel({\n\t\t\t\t\t\tisShareInJamActive: bIsShareInJamActive\n\t\t\t\t\t});\n\t\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\t\treturn oModel;+
\n\t\t\t}\n\t\t};\n\n\t}\n);",                                                                                                                                                                                                                                 
		"com/mscg/applications/cubiscan/measure/view/DetailNoObjectsAvailable.view.xml": "<mvc:View\n\tcontrollerName=\"com.mscg.applications.cubiscan.measure.controller.BaseController\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns=\"sap.m\">\n\n\t<MessagePage\n\+
t\tid=\"page\"\n\t\ttitle=\"{i18n>notAvailableViewTitle}\"\n\t\ttext=\"{i18n>noObjectsAvailableText}\"\n\t\ticon=\"{sap-icon://product}\"\n\t\tdescription=\"\"\n\t\tshowNavButton=\"{device>/system/phone}\"\n\t\tnavButtonPress=\"onNavBack\">\n\t</MessageP+
age>\n\n</mvc:View>",                                                                                                                                                                                                                                          
		"com/mscg/applications/cubiscan/measure/view/DetailObjectNotFound.view.xml": "<mvc:View\n\tcontrollerName=\"com.mscg.applications.cubiscan.measure.controller.BaseController\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\ti+
d=\"page\"\n\t\ttitle=\"{i18n>detailTitle}\"\n\t\ttext=\"{i18n>noObjectFoundText}\"\n\t\ticon=\"{sap-icon://product}\"\n\t\tdescription=\"\"\n\t\tshowNavButton=\"{device>/system/phone}\"\n\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>+
",                                                                                                                                                                                                                                                             
		"com/mscg/applications/cubiscan/measure/view/ManualEntryDialog.fragment.xml": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:l=\"sap.ui.layout\" xmlns:f=\"sap.ui.layout.form\" xmlns:core=\"sap.ui.core\">\n\t<Dialog id=\"manualEntryDialog\" showHeader=+
\"false\" contentWidth=\"700px\">\n\t\t<content>\n\t\t\t<VBox class=\"sapUiSmallMargin\">\n\t\t\t\t<f:Form id=\"manualEntryForm\" editable=\"true\">\n\t\t\t\t\t<f:title>\n\t\t\t\t\t\t<core:Title text=\"Add Manual Entry\"/>\n\t\t\t\t\t</f:title>\n\t\t\t\t+
\t<f:layout>\n\t\t\t\t\t\t<f:ResponsiveGridLayout labelSpanXL=\"4\" labelSpanL=\"3\" labelSpanM=\"4\" labelSpanS=\"12\" adjustLabelSpan=\"false\" emptySpanXL=\"0\" emptySpanL=\"4\"\n\t\t\t\t\t\t\temptySpanM=\"0\" emptySpanS=\"0\" columnsXL=\"1\" columnsL+
=\"1\" columnsM=\"1\" singleContainerFullSize=\"false\"/>\n\t\t\t\t\t</f:layout>\n\t\t\t\t\t<f:formContainers>\n\t\t\t\t\t\t<f:FormContainer>\n\t\t\t\t\t\t\t<f:formElements>\n\t\t\t\t\t\t\t\t<f:FormElement label=\"Product\">\n\t\t\t\t\t\t\t\t\t<f:fields>+
\n\t\t\t\t\t\t\t\t\t\t<Input type=\"Text\" id=\"manualEntryProductNumberInput\" placeholder=\"Enter Product ...\" showSuggestion=\"true\" showValueHelp=\"true\"\n\t\t\t\t\t\t\t\t\t\t\tvalueHelpRequest=\"onProductValueHelpRequest\" suggest=\"handleProduct+
Suggestion\" suggestionItems=\"{/ProductLookupSet}\"\n\t\t\t\t\t\t\t\t\t\t\tsubmit=\"handleProductValidation\">\n\t\t\t\t\t\t\t\t\t\t\t<suggestionItems>\n\t\t\t\t\t\t\t\t\t\t\t\t<core:Item text=\"{product}\"/>\n\t\t\t\t\t\t\t\t\t\t\t</suggestionItems>\n\+
t\t\t\t\t\t\t\t\t\t</Input>\n\t\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t\t<f:FormElement label=\"Unit of Measure\">\n\t\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t\t<Select id=\"manualEntryUomInput\" width=\"250px\" +
forceSelection=\"true\" enabled=\"false\"\n\t\t\t\t\t\t\t\t\t\t\titems=\"{ path: '/ProductUomSet', sorter: { path: 'uomKey' }}\">\n\t\t\t\t\t\t\t\t\t\t\t<core:Item key=\"{uomKey}\" text=\"{uomKey}\"/>\n\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t</f+
:fields>\n\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t</f:formElements>\n\t\t\t\t\t\t</f:FormContainer>\n\t\t\t\t\t</f:formContainers>\n\t\t\t\t</f:Form>\n\t\t\t</VBox>\n\t\t</content>\n\t\t<buttons>\n\t\t\t<Button id=\"manualEntrySaveButton\" text=\+
"Save\" enabled=\"false\" press=\"onManualEntryDialogSave\"/>\n\t\t\t<Button id=\"manualEntryCloseButton\" text=\"Close\" press=\"onManualEntryDialogClose\"/>\n\t\t</buttons>\n\t</Dialog>\n</core:FragmentDefinition>",                                      
		"com/mscg/applications/cubiscan/measure/view/Detail.view.xml": "<mvc:View controllerName=\"com.mscg.applications.cubiscan.measure.controller.Detail\" xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:semantic=\"sap.m.semantic\" xmlns:footerbar=\"s+
ap.ushell.ui.footerbar\">\n\t<semantic:DetailPage id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"{device>/system/phone}\" title=\"{i18n>detailTitle}\"\n\t\tbusy=\"{detailView>/busy}\" busyIndicatorDelay=\"{detailView>/delay}\">\n\t\t<semantic:c+
ontent>\n\t\t\t<Toolbar id=\"detailViewToolbar\">\n\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t<Label text=\"Cubiscan Device:\" labelFor=\"cubiscanDeviceInput\" textAlign=\"Left\" class=\"mscgFilterField\"></Label>\n\t\t\t\t<Select id=\"cubiscanDeviceInput\" width+
=\"250px\" selectedKey=\"{detailView>/selectedCubiscanDevice}\" forceSelection=\"true\"/>\n\t\t\t\t<Button id=\"manualEntryButton\" icon=\"sap-icon://add-coursebook\" tooltip=\"Add Manual Entry\" visible=\"false\" press=\"onManualEntryDialogDisplay\"/>\n+
\t\t\t</Toolbar>\n\t\t\t<ObjectHeader id=\"objectHeader\" title=\"{product}\" icon=\"{productImage}\">\n\t\t\t\t<attributes>\n\t\t\t\t\t<ObjectAttribute text=\"{productDescription}\"/>\n\t\t\t\t</attributes>\n\t\t\t</ObjectHeader>\n\t\t\t<Table id=\"line+
ItemsList\" width=\"auto\" items=\"{path: 'worklistItems', factory: '.worklistItemsFactory'}\"\n\t\t\t\tupdateFinished=\"onListUpdateFinished\" noDataText=\"{i18n>detailLineItemTableNoDataText}\"\n\t\t\t\tbusyIndicatorDelay=\"{detailView>/lineItemTableDe+
lay}\" class=\"sapUiResponsiveMargin\">\n\t\t\t\t<headerToolbar>\n\t\t\t\t\t<Toolbar id=\"lineItemsToolbar\">\n\t\t\t\t\t\t<Title id=\"lineItemsHeader\" text=\"{detailView>/lineItemListTitle}\"/>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</headerToolbar>\n\t\t\t\t<+
columns>\n\t\t\t\t\t<Column>\n\t\t\t\t\t\t<Text text=\"Unit of Measure\"/>\n\t\t\t\t\t</Column>\n\t\t\t\t\t<Column>\n\t\t\t\t\t\t<Text text=\"Status\"/>\n\t\t\t\t\t</Column>\n\t\t\t\t\t<Column/>\n\t\t\t\t</columns>\n\t\t\t</Table>\n\t\t</semantic:content+
>\n\t\t<semantic:sendEmailAction>\n\t\t\t<semantic:SendEmailAction id=\"shareEmail\" press=\"onShareEmailPress\"/>\n\t\t</semantic:sendEmailAction>\n\t\t<semantic:shareInJamAction>\n\t\t\t<semantic:ShareInJamAction id=\"shareInJam\" visible=\"{FLP>/isSha+
reInJamActive}\" press=\"onShareInJamPress\"/>\n\t\t</semantic:shareInJamAction>\n\t\t<semantic:saveAsTileAction>\n\t\t\t<footerbar:AddBookmarkButton id=\"shareTile\" title=\"{detailView>/saveAsTileTitle}\"/>\n\t\t</semantic:saveAsTileAction>\n\t</semant+
ic:DetailPage>\n</mvc:View>",                                                                                                                                                                                                                                  
		"com/mscg/applications/cubiscan/measure/view/MessageDialog.fragment.xml": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:l=\"sap.ui.layout\" xmlns:f=\"sap.ui.layout.form\" xmlns:core=\"sap.ui.core\">\n\t<Dialog id=\"messagesDialog\" title=\"Messages\"+
 resizable=\"false\" contentHeight=\"300px\" showHeader=\"false\" contentWidth=\"500px\"\n\t\tverticalScrolling=\"false\">\n\t\t<content>\n\t\t\t<MessageView items=\"{ path: '/messages' }\">\n\t\t\t\t<items>\n\t\t\t\t\t<MessageItem type=\"{type}\" title=+
\"{title}\" description=\"{description}\"/>\n\t\t\t\t</items>\n\t\t\t</MessageView>\n\t\t</content>\n\t\t<buttons>\n\t\t\t<Button id=\"messagesCloseButton\" text=\"Close\" press=\"onMessagesDialogClose\"/>\n\t\t</buttons>\n\t</Dialog>\n</core:FragmentDef+
inition>",                                                                                                                                                                                                                                                     
		"com/mscg/applications/cubiscan/measure/view/ViewSettingsDialog.fragment.xml": "<core:FragmentDefinition\n\txmlns=\"sap.m\"\n\txmlns:core=\"sap.ui.core\">\n\n\t<ViewSettingsDialog\n\t\tid=\"viewSettingsDialog\"\n\t\tconfirm=\"onConfirmViewSettingsDialo+
g\"\n\t\tresetFilters=\"onViewSettingsDialogResetFilters\">\n\t\t<filterItems>\n\t\t\t<ViewSettingsFilterItem\n\t\t\t\tid=\"filterItems\"\n\t\t\t\ttext=\"{i18n>masterFilterName}\"\n\t\t\t\tkey=\"Price\"\n\t\t\t\tmultiSelect=\"false\">\n\t\t\t\t<items>\n\+
t\t\t\t\t<ViewSettingsItem\n\t\t\t\t\t\ttext=\"{i18n>masterFilter1}\"\n\t\t\t\t\t\tkey=\"Filter1\"\n\t\t\t\t\t\tid=\"viewFilter1\"/>\n\t\t\t\t\t<ViewSettingsItem\n\t\t\t\t\t\ttext=\"{i18n>masterFilter2}\"\n\t\t\t\t\t\tkey=\"Filter2\"\n\t\t\t\t\t\tid=\"vi+
ewFilter2\"/>\n\t\t\t\t</items>\n\t\t\t</ViewSettingsFilterItem>\n\t\t</filterItems>\n\t</ViewSettingsDialog>\n\n</core:FragmentDefinition>",                                                                                                                  
		"com/mscg/applications/cubiscan/measure/view/MeasurementDetailsDialog.fragment.xml": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:l=\"sap.ui.layout\" xmlns:f=\"sap.ui.layout.form\" xmlns:core=\"sap.ui.core\">\n\t<Dialog id=\"measurementDetailsEditDi+
alog\" showHeader=\"false\" contentWidth=\"700px\">\n\t\t<content>\n\t\t\t<VBox class=\"sapUiSmallMargin\">\n\t\t\t\t<f:Form id=\"editForm\" editable=\"true\">\n\t\t\t\t\t<f:title>\n\t\t\t\t\t\t<core:Title text=\"{parts: [ 'i18n>cubiscanMeasurementView.t+
itle', 'product', 'unitOfMeasure' ], formatter: 'jQuery.sap.formatMessage'}\"/>\n\t\t\t\t\t</f:title>\n\t\t\t\t\t<f:layout>\n\t\t\t\t\t\t<f:ResponsiveGridLayout labelSpanXL=\"4\" labelSpanL=\"3\" labelSpanM=\"4\" labelSpanS=\"12\" adjustLabelSpan=\"false+
\" emptySpanXL=\"0\" emptySpanL=\"4\"\n\t\t\t\t\t\t\temptySpanM=\"0\" emptySpanS=\"0\" columnsXL=\"1\" columnsL=\"1\" columnsM=\"1\" singleContainerFullSize=\"false\"/>\n\t\t\t\t\t</f:layout>\n\t\t\t\t\t<f:formContainers>\n\t\t\t\t\t\t<f:FormContainer>\n+
\t\t\t\t\t\t\t<f:formElements>\n\t\t\t\t\t\t\t\t<f:FormElement>\n\t\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t\t<Label text=\"\"/>\n\t\t\t\t\t\t\t\t\t\t<Label text=\"Cubiscan\"/>\n\t\t\t\t\t\t\t\t\t\t<Label text=\"Current\"/>\n\t\t\t\t\t\t\t\t\t</f:fi+
elds>\n\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t\t<f:FormElement label=\"Length\">\n\t\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"Number\" id=\"cubiscanLength\" maxLength=\"6\" width=\"130px\" value=\"{length}\" description=\"{di+
mensionUom}\" enabled=\"false\"/>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"Number\" id=\"masterDataLength\" maxLength=\"6\" width=\"130px\" value=\"{productData/length}\" description=\"{productData/lengthUom}\"\n\t\t\t\t\t\t\t\t\t\t\tenabled=\"false\"/>\n\t\t\+
t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t\t<f:FormElement label=\"Width\">\n\t\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"Number\" id=\"cubiscanWidth\" maxLength=\"6\" width=\"130px\" value=\"{width}\" d+
escription=\"{dimensionUom}\" enabled=\"false\"/>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"Number\" id=\"masterDataWidth\" maxLength=\"6\" width=\"130px\" value=\"{productData/width}\" description=\"{productData/widthUom}\"\n\t\t\t\t\t\t\t\t\t\t\tenabled=\"fal+
se\"/>\n\t\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t\t<f:FormElement label=\"Height\">\n\t\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"Number\" id=\"cubiscanHeight\" maxLength=\"6\" width=\"130px\" valu+
e=\"{height}\" description=\"{dimensionUom}\" enabled=\"false\"/>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"Number\" id=\"masterDataHeight\" maxLength=\"6\" width=\"130px\" value=\"{productData/height}\" description=\"{productData/heightUom}\"\n\t\t\t\t\t\t\t\t+
\t\t\tenabled=\"false\"/>\n\t\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t\t<f:FormElement label=\"Gross Weight\">\n\t\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"Number\" id=\"cubiscanGrossWeight\" maxLen+
gth=\"6\" width=\"130px\" value=\"{grossWeight}\" description=\"{weightUom}\" enabled=\"false\"/>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"Number\" id=\"masterDataGrossWeight\" maxLength=\"6\" width=\"130px\" value=\"{productData/grossWeight}\"\n\t\t\t\t\t\t\t+
\t\t\t\tdescription=\"{productData/grossWeightUom}\" enabled=\"false\"/>\n\t\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t\t<f:FormElement label=\"Volume\">\n\t\t\t\t\t\t\t\t\t<f:fields>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"N+
umber\" id=\"cubiscanVolume\" maxLength=\"6\" width=\"130px\" value=\"{volume}\" description=\"{volumeUom}\" enabled=\"false\"/>\n\t\t\t\t\t\t\t\t\t\t<Input type=\"Number\" id=\"masterDataVolume\" maxLength=\"6\" width=\"130px\" value=\"{productData/volu+
me}\" description=\"{productData/volumeUom}\"\n\t\t\t\t\t\t\t\t\t\t\tenabled=\"false\"/>\n\t\t\t\t\t\t\t\t\t</f:fields>\n\t\t\t\t\t\t\t\t</f:FormElement>\n\t\t\t\t\t\t\t</f:formElements>\n\t\t\t\t\t\t</f:FormContainer>\n\t\t\t\t\t</f:formContainers>\n\t\+
t\t\t</f:Form>\n\t\t\t\t<Label text=\"{uomConversionTxt}\"/>\n\t\t\t\t<BusyDialog id=\"measureBusyDialog\" visible=\"false\" title=\"Cubiscan\" text=\"Waiting for Cubiscan data...\" showCancelButton=\"true\"\n\t\t\t\t\tclose=\"onMeasureBusyDialogClose\"/+
>\n\t\t\t</VBox>\n\t\t</content>\n\t\t<buttons>\n\t\t\t<Button id=\"editMeasureButton\" text=\"Measure\" press=\"onCubiscanDialogMeasure\" visible=\"{detailView>/isEditCubiscanDialog}\"/>\n\t\t\t<Button id=\"editUpdateButton\" text=\"Update\" enabled=\"f+
alse\" press=\"onCubiscanDialogUpdate\" visible=\"{detailView>/isEditCubiscanDialog}\"/>\n\t\t\t<Button id=\"editDiscrepancyButton\" text=\"Discrepancy\" press=\"onCubiscanDialogDiscrepancy\" visible=\"{detailView>/isEditCubiscanDialog}\"/>\n\t\t\t<Butto+
n id=\"editCloseButton\" text=\"Close\" press=\"onCubiscanDialogClose\"/>\n\t\t</buttons>\n\t</Dialog>\n</core:FragmentDefinition>",                                                                                                                           
		"com/mscg/applications/cubiscan/measure/view/App.view.xml": "<mvc:View\n\tcontrollerName=\"com.mscg.applications.cubiscan.measure.controller.App\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\"\n\tbusy=\"{appView>/busy}\"\n\tbusyIndicatorDel+
ay=\"{appView>/delay}\"\n\txmlns=\"sap.m\">\n\t<SplitApp id=\"idAppControl\" />\n</mvc:View>",                                                                                                                                                                 
		"com/mscg/applications/cubiscan/measure/view/NotFound.view.xml": "<mvc:View\n\tcontrollerName=\"com.mscg.applications.cubiscan.measure.controller.BaseController\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns=\"sap.m\">\n\n\t<MessagePage\n\t\tid=\"page\"\n+
\t\ttitle=\"{i18n>notFoundTitle}\"\n\t\ttext=\"{i18n>notFoundText}\"\n\t\ticon=\"{sap-icon://document}\"\n\t\tdescription=\"\"\n\t\tshowNavButton=\"{device>/system/phone}\"\n\t\tnavButtonPress=\"onNavBack\">\n\t</MessagePage>\n\n</mvc:View>"              
	}                                                                                                                                                                                                                                                             
});                                                                                                                                                                                                                                                            